PoC: libxc+ocaml: add interfaces to send triggers to HVM guests

* ACPI power button event
* ACPI sleep button event

Required by xapi.

Taken from xen-api-libs.hg/xc and adjusted for upstream libxc+ocaml.

Signed-off-by: Ian Campbell <ian.campbell@citrix.com>

diff --git a/tools/libxc/include/xenctrl.h b/tools/libxc/include/xenctrl.h
index 03b8404..c29b21e 100644
--- a/tools/libxc/include/xenctrl.h
+++ b/tools/libxc/include/xenctrl.h
@@ -841,6 +841,9 @@ int xc_domain_set_hpet(xc_interface *xch, unsigned int domid, int hpet);
 int xc_domain_set_vpt_align(xc_interface *xch, unsigned int domid, int vpt_align);
 int xc_domain_get_acpi_s_state(xc_interface *xch, unsigned int domid);
 
+int xc_domain_trigger_power(xc_interface *xch, unsigned int domid);
+int xc_domain_trigger_sleep(xc_interface *xch, unsigned int domid);
+
 /**
  * This function returns information about the execution context of a
  * particular vcpu of a domain.
diff --git a/tools/libxc/xc_domain.c b/tools/libxc/xc_domain.c
index d3fa8ef..c0c10a4 100644
--- a/tools/libxc/xc_domain.c
+++ b/tools/libxc/xc_domain.c
@@ -2536,6 +2536,36 @@ int xc_domain_get_acpi_s_state(xc_interface *xch, unsigned int domid)
     return value;
 }
 
+int xc_domain_trigger_power(xc_interface *xch, unsigned int domid)
+{
+    int ret;
+    DECLARE_DOMCTL;
+
+    domctl.cmd = XEN_DOMCTL_sendtrigger;
+    domctl.domain = domid;
+    domctl.u.sendtrigger.trigger = XEN_DOMCTL_SENDTRIGGER_POWER;
+
+    ret = do_domctl(xch, &domctl);
+    if (ret != 0)
+        ERROR("power button failed");
+    return ret;
+}
+
+int xc_domain_trigger_sleep(xc_interface *xch, unsigned int domid)
+{
+    int ret;
+    DECLARE_DOMCTL;
+
+    domctl.cmd = XEN_DOMCTL_sendtrigger;
+    domctl.domain = domid;
+    domctl.u.sendtrigger.trigger = XEN_DOMCTL_SENDTRIGGER_SLEEP;
+
+    ret = do_domctl(xch, &domctl);
+    if (ret != 0)
+        ERROR("sleep button failed");
+    return ret;
+}
+
 int xc_domain_getvnuma(xc_interface *xch,
                        uint32_t domid,
                        uint32_t *nr_vnodes,
diff --git a/tools/ocaml/libs/xc/xenctrl.ml b/tools/ocaml/libs/xc/xenctrl.ml
index cec3ab2..5db7ce1 100644
--- a/tools/ocaml/libs/xc/xenctrl.ml
+++ b/tools/ocaml/libs/xc/xenctrl.ml
@@ -244,6 +244,9 @@ external domain_set_vpt_align: handle -> domid -> int -> unit = "stub_xc_domain_
 external domain_send_s3resume: handle -> domid -> unit = "stub_xc_domain_send_s3resume"
 external domain_get_acpi_s_state: handle -> domid -> int = "stub_xc_domain_get_acpi_s_state"
 
+external domain_trigger_power: handle -> domid -> unit = "stub_xc_domain_trigger_power"
+external domain_trigger_sleep: handle -> domid -> unit = "stub_xc_domain_trigger_sleep"
+
 (** check if some hvm domain got pv driver or not *)
 external hvm_check_pvdriver: handle -> domid -> bool
        = "stub_xc_hvm_check_pvdriver"
diff --git a/tools/ocaml/libs/xc/xenctrl.mli b/tools/ocaml/libs/xc/xenctrl.mli
index 58b47b4..54fdefc 100644
--- a/tools/ocaml/libs/xc/xenctrl.mli
+++ b/tools/ocaml/libs/xc/xenctrl.mli
@@ -150,6 +150,11 @@ external domain_send_s3resume: handle -> domid -> unit
   = "stub_xc_domain_send_s3resume"
 external domain_get_acpi_s_state: handle -> domid -> int = "stub_xc_domain_get_acpi_s_state"
 
+external domain_trigger_power: handle -> domid -> unit
+  = "stub_xc_domain_trigger_power"
+external domain_trigger_sleep: handle -> domid -> unit
+  = "stub_xc_domain_trigger_sleep"
+
 external hvm_check_pvdriver : handle -> domid -> bool
   = "stub_xc_hvm_check_pvdriver"
 external version : handle -> version = "stub_xc_version_version"
diff --git a/tools/ocaml/libs/xc/xenctrl_stubs.c b/tools/ocaml/libs/xc/xenctrl_stubs.c
index c349398..d7360a4 100644
--- a/tools/ocaml/libs/xc/xenctrl_stubs.c
+++ b/tools/ocaml/libs/xc/xenctrl_stubs.c
@@ -1309,6 +1309,20 @@ CAMLprim value stub_xc_domain_set_vpt_align(value xch, value id, value mode)
         CAMLreturn(Val_unit);
 }
 
+CAMLprim value stub_xc_domain_trigger_power(value xch, value domid)
+{
+	CAMLparam2(xch, domid);
+	xc_domain_trigger_power(_H(xch), _D(domid));
+	CAMLreturn(Val_unit);
+}
+
+CAMLprim value stub_xc_domain_trigger_sleep(value xch, value domid)
+{
+	CAMLparam2(xch, domid);
+	xc_domain_trigger_sleep(_H(xch), _D(domid));
+	CAMLreturn(Val_unit);
+}
+
 /*
  * Local variables:
  *  indent-tabs-mode: t
