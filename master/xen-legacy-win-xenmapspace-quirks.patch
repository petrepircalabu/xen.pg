Oh dear.  What a mess.
My deepest apologies to anyone maintaining this in the future.


The XENMAPSPACE_* spaces have been abused over and over again in older
drivers, and with upstream changes in Xen-4.2, the differences finally become
incompatible, and in Xen-4.3 become worse.

XENMAPSPACE_shared_info:

Upstream, this map space is index 0.  However, the Geneva and Zurich
Windows drivers assume that mapping space 0 will get them a 32-bit
shared info structure, because they didn't consider the possibility of
running 32 bit drivers on a 64 bit hypervisor.  This was presumably
fixed for Rio by introducing map space index 4.  The Windows drivers for
Rio through Orlando assume that shared info is available at number 4 and
0, and will map number 4 first.  Midnight Ride drivers will check the
Xen version; if it's greater than 3.3, they map 0 only, otherwise, they
map 4 and then 0.

index 4 is used upstream as of Xen 4.3, but is specified as only for use with
the XENMEM_add_to_physmap_range hypercall, rather than the
XENMEM_add_to_physmap hypercall used by the windows PV drivers.  Therefore we
can get away with a direct alias, by the skin of our teeth.



XENMAPSPACE_physical:

This is a synonym for XENMAPSPACE_gmfn, and whos space index presumably
got transformed when the work was upstreamed?  The space index
0x80000001 does not alias any upstream space.



XENMAPSPACE_vlapic:

Here is where we encounter problems the real problems. :(

The vlapic code used to be local to our patch queue, was once space 3, and
has a non-compat version as space 0x80000000.  Space 3 now conflicts with
space gmfn_range which is fairly new upstream.

The legacy drivers from Oct 2008 until Tampa will try space 0x8000000 first,
and fall back to space 3.  Now there is a fastpath for LAPIC VMEXITs which
avoid the full MMIO emulation path, no implementation for vlapic is needed.

However, on migrate the attempt to map space 0x80000000 is the first
indication we have of legacy drivers, which is immediatly before an attempt
to map space 3, assuming that it would be the vlapic implementation not the
gmfn_range implementation.  Windows with legacy drivers promply triple
fault if the gmfn_range gets mixed up, so we need to re-trigger quirks mode
on an attempt to map 0x80000000.  We can however safely fail both vlapic
map attempts, as it was only ever a performance optimisation on older
hardware which didn't support TPR shadowing.



Overall:

The newstyle drivers do not use any of this hackary, we can use a hypercall
with space 0x8000000 as a trigger to enable quirks mode, and luckily the
recent legacy drivers will do this in the correct order.

Ancient drivers (before Oct 2008) which don't know about space 0x80000000
will only try space 3.  If we have latched quirks mode earlier then all is
fine, but if not then the domain will triple fault.  As we also latch
quirks mode based on the HVMOP_set_driver_version hypercall, then a freshly
booted domain will still be fine with ancient legacy drivers.

The only case which may crash will be a migrate of a VM from an older
XenServer host (Xen-4.1 based or older) to a new XenServer (Xen-4.2 or
newer) host which is still running ancient legacy drivers which only know
about space 3.  The domain will triple fault and reboot at which point the
driver will then start up from scratch and use the HVMOP_set_driver_version
hypercall, at which point we are safe from further crashes.  (We do still
take as many opportunities to latch quirks mode as possible, and it is
likely that we can latch quirks mode based on space 4, which will likely be
attempted before space 3).

diff --git a/xen/arch/x86/mm.c b/xen/arch/x86/mm.c
index 37c101d..b8c8df0 100644
--- a/xen/arch/x86/mm.c
+++ b/xen/arch/x86/mm.c
@@ -4834,6 +4834,11 @@ int xenmem_add_to_physmap_one(
         }
         case XENMAPSPACE_gmfn_foreign:
             return p2m_add_foreign(d, idx, gpfn, extra.foreign_domid);
+        case XENMAPSPACE_vlapic:
+            /* Legacy vlapic map space is not implemented any more now there
+             * is a fastpath for LAPIC VMEXITs which avoid the general MMIO
+             * emulation path, but still crutially needed to trigger quirks
+             * mode for legacy windows drivers on migrate. */
         default:
             break;
     }
diff --git a/xen/common/memory.c b/xen/common/memory.c
index c8cde7c..33f9493 100644
--- a/xen/common/memory.c
+++ b/xen/common/memory.c
@@ -863,6 +863,81 @@ static long xatp_permission_check(struct domain *d, unsigned int space)
     return xsm_add_to_physmap(XSM_TARGET, current->domain, d);
 }
 
+/* Set quirks mode, using the quirks mode flag to one-time print a
+ * message indicating that decided to enable quirks mode, based on
+ * heuristics.
+ */
+static void _set_quirks_mode(struct domain *d, const char *reason)
+{
+    if ( d->arch.hvm_domain._win_legacy_quirks == 0 )
+        gdprintk(XENLOG_INFO, "Heuristically enabling legacy windows quirks mode. (%s)\n", reason);
+    d->arch.hvm_domain._win_legacy_quirks = 1;
+}
+
+/* Transform the requested XENMAPSPACE_* based on the quirks mode of the
+ * HVM guest, to allow legacy windows drivers to continue to work
+ * despite upstream xen diverging in an binary incompatible manner. */
+static unsigned int _quirks_transform_space(struct domain *d, unsigned int space)
+{
+    switch ( space )
+    {
+        /* Space 3 - Shared between XENMAPSPACE_gmfn_range and
+         * XENMAPSPACE_vlapic_compat.  If we have already detected that
+         * this domain is in quirks mode, we know that the PV drivers
+         * know nothing of _gmfn_range, so transform back to
+         * XENMAPSPACE_vlapic.
+         *
+         * If we have not detected quirks mode, then we must not
+         * transform the space, to avoid breaking HVM domains which know
+         * and use _gmfn_range.
+         *
+         * This leaves a possibility of ancient drivers which have not
+         * been detected, which are expecting vlapic, but get
+         * gmfn_range.  In this case, the domain triple faults very
+         * shortly later.
+         */
+    case XENMAPSPACE_gmfn_range:
+        if ( d->arch.hvm_domain._win_legacy_quirks )
+            return XENMAPSPACE_vlapic;
+        else
+            return XENMAPSPACE_gmfn_range;
+
+
+        /* Space 4 - Shared between XENMAPSPACE_shared_info_old_xs and
+         * XENMAPSPACE_gmfn_foreign, although XENMAPSPACE_gmfn_foreign is
+         * currently defined as "XENMEM_add_to_physmap_range only".  This is
+         * because a foreign domid cannot be inserted into basic
+         * XENMEM_add_to_physmap structure.  Therefore, we will not see the
+         * binary incompatibility here from anything other than the legacy
+         * drivers.
+         */
+    case XENMAPSPACE_shared_info_old_xs:
+        _set_quirks_mode(d, "XENMAPSPACE_shared_info_old_xs");
+        return XENMAPSPACE_shared_info;
+
+        /* Space 0x80000000, unaliased upstream.  Exists only in our
+         * patch queue, but only used by the legacy drivers so we can
+         * take the opportunity to latch quirks mode.  This space is
+         * implemented in the parent, so don't actually transform the
+         * space.
+         */
+    case XENMAPSPACE_vlapic:
+        _set_quirks_mode(d, "XENMAPSPACE_vlapic");
+        return XENMAPSPACE_vlapic;
+
+        /* Space 0x80000001, unaliased upstream.  Same meaning as
+         * XENMAPSPACE_gmfn upstream.
+         */
+    case XENMAPSPACE_physical:
+        _set_quirks_mode(d, "XENMAPSPACE_physical");
+        return XENMAPSPACE_gmfn;
+
+        /* Default is fall-through without transform. */
+    default:
+        return space;
+    }
+}
+
 long do_memory_op(unsigned long cmd, XEN_GUEST_HANDLE_PARAM(void) arg)
 {
     struct domain *d;
@@ -1025,8 +1100,12 @@ long do_memory_op(unsigned long cmd, XEN_GUEST_HANDLE_PARAM(void) arg)
             return -EFAULT;
 
         /* Foreign mapping is only possible via add_to_physmap_batch. */
-        if ( xatp.space == XENMAPSPACE_gmfn_foreign )
-            return -ENOSYS;
+        /* if ( xatp.space == XENMAPSPACE_gmfn_foreign ) */
+        /*     return -ENOSYS; */
+
+        /* XenServer legacy win quirks.  This should be -ENOSYS, but the
+         * legacy windows drivers use this ABI.  _quirks_transform_space()
+         * will deal with fixing it up correctly. */
 
         d = rcu_lock_domain_by_any_id(xatp.domid);
         if ( d == NULL )
@@ -1039,6 +1118,7 @@ long do_memory_op(unsigned long cmd, XEN_GUEST_HANDLE_PARAM(void) arg)
             return rc;
         }
 
+        xatp.space = _quirks_transform_space(d, xatp.space);
         rc = xenmem_add_to_physmap(d, &xatp, start_extent);
 
         rcu_unlock_domain(d);
diff --git a/xen/include/public/memory.h b/xen/include/public/memory.h
index 29ec571..d904e52 100644
--- a/xen/include/public/memory.h
+++ b/xen/include/public/memory.h
@@ -242,6 +242,13 @@ struct xen_add_to_physmap {
 
     unsigned int space; /* => enum phys_map_space */
 
+    /* Legacy Windows compat spaces. Read patch comment for info. */
+#define XENMAPSPAEC_vlapic_compat        3 /* Compat per-vcpu vlapic regs page */
+#define XENMAPSPACE_shared_info_old_xs   4 /* shared info page. */
+#define XENMAPSPACE_vlapic      0x80000000 /* per-vcpu vlapic regs page */
+#define XENMAPSPACE_physical    0x80000001 /* Remap a page from one PFN to another. */
+
+
 #define XENMAPIDX_grant_table_status 0x80000000
 
     /* Index into space being mapped. */
