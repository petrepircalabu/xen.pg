# HG changeset patch
# Parent 7c0b271b5d57be6fbeb94587d249bf48a06c816b

diff --git a/tools/firmware/hvmloader/config.h b/tools/firmware/hvmloader/config.h
index b838cf9..b6f3d33 100644
--- a/tools/firmware/hvmloader/config.h
+++ b/tools/firmware/hvmloader/config.h
@@ -6,7 +6,7 @@
 enum virtual_vga { VGA_none, VGA_std, VGA_cirrus, VGA_pt };
 extern enum virtual_vga virtual_vga;
 
-extern unsigned long igd_opregion_pgbase;
+extern unsigned long igd_opregion_addr;
 #define IGD_OPREGION_PAGES 3
 
 struct bios_config {
diff --git a/tools/firmware/hvmloader/e820.c b/tools/firmware/hvmloader/e820.c
index 5541b18..3132733 100644
--- a/tools/firmware/hvmloader/e820.c
+++ b/tools/firmware/hvmloader/e820.c
@@ -203,12 +203,12 @@ int build_e820_table(struct e820entry *e820,
      * This space starts at RESERVED_MEMBASE an extends to cover various
      * fixed hardware mappings (e.g., LAPIC, IOAPIC, default SVGA framebuffer).
      *
-     * If igd_opregion_pgbase we need to split the RESERVED region in two.
+     * If igd_opregion_addr we need to split the RESERVED region in two.
      */
 
-    if ( igd_opregion_pgbase )
+    if ( igd_opregion_addr )
     {
-        uint32_t igd_opregion_base = igd_opregion_pgbase << PAGE_SHIFT;
+        uint32_t igd_opregion_base = igd_opregion_addr & ~(PAGE_SIZE-1);
 
         e820[nr].addr = RESERVED_MEMBASE;
         e820[nr].size = (uint32_t) igd_opregion_base - RESERVED_MEMBASE;
diff --git a/tools/firmware/hvmloader/pci.c b/tools/firmware/hvmloader/pci.c
index 2773583..92ced7d 100644
--- a/tools/firmware/hvmloader/pci.c
+++ b/tools/firmware/hvmloader/pci.c
@@ -35,7 +35,7 @@ unsigned long pci_mem_end = PCI_MEM_END;
 uint64_t pci_hi_mem_start = 0, pci_hi_mem_end = 0;
 
 enum virtual_vga virtual_vga = VGA_none;
-unsigned long igd_opregion_pgbase = 0;
+unsigned long igd_opregion_addr = 0;
 
 /* Check if the specified range conflicts with any reserved device memory. */
 static bool check_overlap_all(uint64_t start, uint64_t size)
@@ -157,6 +157,22 @@ void pci_setup(void)
         ASSERT((devfn != PCI_ISA_DEVFN) ||
                ((vendor_id == 0x8086) && (device_id == 0x7000)));
 
+        if (( vendor_id == 0x8086 ) && (class == 0x0300 || class == 0x0380))
+        {
+            igd_opregion_addr = mem_hole_alloc(IGD_OPREGION_PAGES);
+            /*
+             * Write the the OpRegion offset to give the opregion
+             * address to the device model. The device model will trap
+             * and map the OpRegion at the give address.
+             */
+            pci_writel(devfn, PCI_INTEL_OPREGION,
+                       igd_opregion_addr << PAGE_SHIFT);
+	    /* Read back the PCI OPREGION to get the full address */
+            igd_opregion_addr = pci_readl(devfn, PCI_INTEL_OPREGION);
+	    printf("Intel IGD opregion mapped at 0x%lx\n",
+			    igd_opregion_addr);
+        }
+
         switch ( class )
         {
         case 0x0300:
@@ -180,17 +196,6 @@ void pci_setup(void)
                     vga_devfn = devfn;
                     virtual_vga = VGA_std;
                 }
-                else if ( vendor_id == 0x8086 )
-                {
-                    igd_opregion_pgbase = mem_hole_alloc(IGD_OPREGION_PAGES);
-                    /*
-                     * Write the the OpRegion offset to give the opregion
-                     * address to the device model. The device model will trap 
-                     * and map the OpRegion at the give address.
-                     */
-                    pci_writel(vga_devfn, PCI_INTEL_OPREGION,
-                               igd_opregion_pgbase << PAGE_SHIFT);
-                }
             }
             break;
         case 0x0680:
diff --git a/tools/firmware/hvmloader/rombios.c b/tools/firmware/hvmloader/rombios.c
index 63bf465..d360f4c 100644
--- a/tools/firmware/hvmloader/rombios.c
+++ b/tools/firmware/hvmloader/rombios.c
@@ -41,6 +41,9 @@
 #define ROMBIOS_SIZE           0x00010000
 #define ROMBIOS_MAXOFFSET      0x0000FFFF
 #define ROMBIOS_END            (ROMBIOS_BEGIN + ROMBIOS_SIZE)
+#define IGD_OPREGION_VBT_OFFSET 0x400
+#define IGD_VBT_SIZE 0x1200
+#define IGD_VBIOS_VBT_OFFSET 0x1A
 
 static void rombios_setup_e820(void)
 {
@@ -63,6 +66,19 @@ static void rombios_setup_bios_info(void)
     memset(info, 0, sizeof(*info));
 }
 
+/* recalculate the new ROMBIOS checksum after adding MP tables */
+static int8_t calc_bios_checksum(uint8_t *data, uint32_t offset)
+{
+    uint32_t i;
+    uint8_t checksum;
+
+    checksum = 0;
+    for ( i = 0; i < offset; i++ )
+        checksum += data[i];
+
+    return -checksum;
+}
+
 static void rombios_load_roms(void)
 {
     int option_rom_sz = 0, vgabios_sz = 0, etherboot_sz = 0;
@@ -91,6 +107,26 @@ static void rombios_load_roms(void)
         printf("No emulated VGA adaptor ...\n");
         break;
     }
+    if ( igd_opregion_addr ) {
+        int8_t checksum;
+        printf("Adding Intel VBT region to VBIOS at 0x%x\n",
+			VGABIOS_PHYSICAL_ADDRESS + sizeof(vgabios_stdvga));
+        memcpy((void *)VGABIOS_PHYSICAL_ADDRESS + sizeof(vgabios_stdvga),
+               (void *)igd_opregion_addr + IGD_OPREGION_VBT_OFFSET,
+	       IGD_VBT_SIZE);
+
+	/* Write the offset to the VBT into a unused portion of the VBIOS*/
+	*((uint16_t *)(VGABIOS_PHYSICAL_ADDRESS + IGD_VBIOS_VBT_OFFSET)) = (uint16_t)(sizeof(vgabios_stdvga));
+        vgabios_sz = round_option_rom(sizeof(vgabios_stdvga) + IGD_VBT_SIZE);
+
+        /* adjust vBIOS option rom size to include VBT region */
+        *((uint8_t *) VGABIOS_PHYSICAL_ADDRESS + 0x2) = vgabios_sz/512;
+
+        /* correct option ROM checksum after adjusting option ROM size */
+	checksum = calc_bios_checksum((uint8_t *)VGABIOS_PHYSICAL_ADDRESS,
+		 vgabios_sz - 1 );
+        *(int8_t *)(VGABIOS_PHYSICAL_ADDRESS + vgabios_sz - 1) = checksum;
+    }
 
     etherboot_phys_addr = VGABIOS_PHYSICAL_ADDRESS + vgabios_sz;
     if ( etherboot_phys_addr < OPTIONROM_PHYSICAL_ADDRESS )
@@ -161,14 +197,9 @@ static void *get_mp_table_start(void)
 /* recalculate the new ROMBIOS checksum after adding MP tables */
 static void reset_bios_checksum(void)
 {
-    uint32_t i;
-    uint8_t checksum;
-
-    checksum = 0;
-    for ( i = 0; i < ROMBIOS_MAXOFFSET; i++ )
-        checksum += ((uint8_t *)(ROMBIOS_BEGIN))[i];
-
-    *((uint8_t *)(ROMBIOS_BEGIN + ROMBIOS_MAXOFFSET)) = -checksum;
+    int8_t checksum;
+    checksum = calc_bios_checksum((uint8_t *) ROMBIOS_BEGIN, ROMBIOS_MAXOFFSET);
+    *((uint8_t *)(ROMBIOS_BEGIN + ROMBIOS_MAXOFFSET)) = checksum;
 }
 
 static void rombios_acpi_build_tables(void)
diff --git a/xen/include/asm-x86/msr-index.h b/xen/include/asm-x86/msr-index.h
index f2f90d9..5a0692d 100644
--- a/xen/include/asm-x86/msr-index.h
+++ b/xen/include/asm-x86/msr-index.h
@@ -507,4 +507,10 @@
 #define MSR_CC6_DEMOTION_POLICY_CONFIG	0x00000668
 #define MSR_MC6_DEMOTION_POLICY_CONFIG	0x00000669
 
+/* Intel integrated graphics MSRs */
+#define MSR_IA_ELLCOS_WAYS_0		0xd00
+#define MSR_IA_ELLCOS_WAYS_1		0xd01
+#define MSR_IA_ELLCOS_WAYS_2		0xd02
+#define MSR_IA_ELLCOS_WAYS_3		0xd03
+
 #endif /* __ASM_MSR_INDEX_H */
