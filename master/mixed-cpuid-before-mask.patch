Add a new hypercall and libxc wrapper to get the CPUID feature leaves
as they were before and after the FlexMigrate/Extended Migration masks.

This is not the ideal way to do it - in particular I think probably
platform_ops is the wrong hypercall, and it definitely needs to
allocate a better cmd number before going upstream.

diff --git a/tools/libxc/include/xenctrl.h b/tools/libxc/include/xenctrl.h
index 6d1b52d..52a7de0 100644
--- a/tools/libxc/include/xenctrl.h
+++ b/tools/libxc/include/xenctrl.h
@@ -38,6 +38,7 @@
 #include <xen/domctl.h>
 #include <xen/physdev.h>
 #include <xen/sysctl.h>
+#include <xen/platform.h>
 #include <xen/version.h>
 #include <xen/event_channel.h>
 #include <xen/sched.h>
@@ -99,6 +100,10 @@
  * between, and be compatible with, both versions.
  */
 
+#define XENCTRL_HAS_GET_CPUFEATURES 1
+/* xc_get_boot_cpufeatures is not upstream, so we use this to allow
+ * the ocaml bindings to conditionally-compile.
+ */
 
 /*
  *  GENERAL
@@ -2750,6 +2755,16 @@ int xc_psr_cmt_get_data(xc_interface *xch, uint32_t rmid,
 int xc_psr_cmt_enabled(xc_interface *xch);
 #endif
 
+/* Get the CPUID feature lists before and after any hardware masks
+ * were applied.  Returns the ANDed aggregate of all online CPUs. */
+int xc_get_boot_cpufeatures(xc_interface *xc_handle,
+                            uint32_t *base_ecx, uint32_t *base_edx,
+                            uint32_t *ext_ecx, uint32_t *ext_edx,
+                            uint32_t *masked_base_ecx,
+                            uint32_t *masked_base_edx,
+                            uint32_t *masked_ext_ecx,
+                            uint32_t *masked_ext_edx);
+
 #endif /* XENCTRL_H */
 
 /*
diff --git a/tools/libxc/xc_misc.c b/tools/libxc/xc_misc.c
index 5a7a770..597597e 100644
--- a/tools/libxc/xc_misc.c
+++ b/tools/libxc/xc_misc.c
@@ -411,6 +411,31 @@ int xc_getcpuinfo(xc_interface *xch, int max_cpus,
 }
 
 
+int xc_get_boot_cpufeatures(xc_interface *xch,
+                            uint32_t *base_ecx, uint32_t *base_edx,
+                            uint32_t *ext_ecx, uint32_t *ext_edx,
+                            uint32_t *masked_base_ecx,
+                            uint32_t *masked_base_edx,
+                            uint32_t *masked_ext_ecx,
+                            uint32_t *masked_ext_edx)
+{
+    xen_platform_op_t pm = {0};
+    int rc;
+
+    pm.cmd = XENPF_get_cpu_features;
+    rc = do_platform(xch, &pm);
+
+    *base_ecx = pm.u.cpu_features.base_ecx;
+    *base_edx = pm.u.cpu_features.base_edx;
+    *ext_ecx = pm.u.cpu_features.ext_ecx;
+    *ext_edx = pm.u.cpu_features.ext_edx;
+    *masked_base_ecx = pm.u.cpu_features.masked_base_ecx;
+    *masked_base_edx = pm.u.cpu_features.masked_base_edx;
+    *masked_ext_ecx = pm.u.cpu_features.masked_ext_ecx;
+    *masked_ext_edx = pm.u.cpu_features.masked_ext_edx;
+    return rc;
+}
+
 int xc_hvm_set_pci_intx_level(
     xc_interface *xch, domid_t dom,
     uint8_t domain, uint8_t bus, uint8_t device, uint8_t intx,
diff --git a/tools/libxc/xc_private.c b/tools/libxc/xc_private.c
index 7a6cbcc..f2b431b 100644
--- a/tools/libxc/xc_private.c
+++ b/tools/libxc/xc_private.c
@@ -524,6 +524,32 @@ int xc_flush_mmu_updates(xc_interface *xch, struct xc_mmu *mmu)
     return flush_mmu_updates(xch, mmu);
 }
 
+int do_platform(xc_interface *xch, struct xen_platform_op *pm)
+{
+    int ret = -1;
+    DECLARE_HYPERCALL;
+    DECLARE_HYPERCALL_BOUNCE(pm, sizeof(*pm), XC_HYPERCALL_BUFFER_BOUNCE_BOTH);
+
+    pm->interface_version = XENPF_INTERFACE_VERSION;
+    if ( xc_hypercall_bounce_pre(xch, pm) )
+    {
+        PERROR("Could not bounce memory for platform op hypercall");
+        return -1;
+    }
+
+    hypercall.op     = __HYPERVISOR_platform_op;
+    hypercall.arg[0] = HYPERCALL_BUFFER_AS_ARG(pm);
+    if ( (ret = do_xen_hypercall(xch, &hypercall)) < 0 )
+    {
+        if ( errno == EACCES )
+            DPRINTF("platform operation failed -- need to"
+                    " rebuild the user-space tool set?\n");
+    }
+
+    xc_hypercall_bounce_post(xch, pm);
+    return ret;
+}
+
 int do_memory_op(xc_interface *xch, int cmd, void *arg, size_t len)
 {
     DECLARE_HYPERCALL;
diff --git a/tools/libxc/xc_private.h b/tools/libxc/xc_private.h
index c406845..b14b88e 100644
--- a/tools/libxc/xc_private.h
+++ b/tools/libxc/xc_private.h
@@ -215,6 +215,7 @@ void xc__hypercall_buffer_cache_release(xc_interface *xch);
  */
 
 int do_xen_hypercall(xc_interface *xch, privcmd_hypercall_t *hypercall);
+int do_platform(xc_interface *xch, struct xen_platform_op *pm);
 
 static inline int do_xen_version(xc_interface *xch, int cmd, xc_hypercall_buffer_t *dest)
 {
diff --git a/tools/ocaml/libs/xc/xenctrl.ml b/tools/ocaml/libs/xc/xenctrl.ml
index 2e521b5..d674176 100644
--- a/tools/ocaml/libs/xc/xenctrl.ml
+++ b/tools/ocaml/libs/xc/xenctrl.ml
@@ -278,6 +278,9 @@ external version_capabilities: handle -> string =
 external watchdog : handle -> int -> int32 -> int
   = "stub_xc_watchdog"
 
+external get_boot_cpufeatures: handle ->
+        (int32 * int32 * int32 * int32 * int32 * int32 * int32 * int32) = "stub_xc_get_boot_cpufeatures"
+
 (* core dump structure *)
 type core_magic = Magic_hvm | Magic_pv
 
diff --git a/tools/ocaml/libs/xc/xenctrl.mli b/tools/ocaml/libs/xc/xenctrl.mli
index 09d8b55..bcc0a28 100644
--- a/tools/ocaml/libs/xc/xenctrl.mli
+++ b/tools/ocaml/libs/xc/xenctrl.mli
@@ -210,3 +210,5 @@ external domain_cpuid_apply_policy: handle -> domid -> unit
 external cpuid_check: handle -> (int64 * (int64 option)) -> string option array -> (bool * string option array)
        = "stub_xc_cpuid_check"
 
+external get_boot_cpufeatures: handle ->
+        (int32 * int32 * int32 * int32 * int32 * int32 * int32 * int32) = "stub_xc_get_boot_cpufeatures"
diff --git a/tools/ocaml/libs/xc/xenctrl_stubs.c b/tools/ocaml/libs/xc/xenctrl_stubs.c
index 167adc1..70ed427 100644
--- a/tools/ocaml/libs/xc/xenctrl_stubs.c
+++ b/tools/ocaml/libs/xc/xenctrl_stubs.c
@@ -1329,6 +1329,30 @@ CAMLprim value stub_xc_domain_trigger_sleep(value xch, value domid)
 	CAMLreturn(Val_unit);
 }
 
+CAMLprim value stub_xc_get_boot_cpufeatures(value xch)
+{
+	CAMLparam1(xch);
+	CAMLlocal1(v);
+	uint32_t a, b, c, d, e, f, g, h;
+	int ret;
+
+	ret = xc_get_boot_cpufeatures(_H(xch), &a, &b, &c, &d, &e, &f, &g, &h);
+	if (ret < 0)
+		failwith_xc(_H(xch));
+
+	v = caml_alloc_tuple(8);
+	Store_field(v, 0, caml_copy_int32(a));
+	Store_field(v, 1, caml_copy_int32(b));
+	Store_field(v, 2, caml_copy_int32(c));
+	Store_field(v, 3, caml_copy_int32(d));
+	Store_field(v, 4, caml_copy_int32(e));
+	Store_field(v, 5, caml_copy_int32(f));
+	Store_field(v, 6, caml_copy_int32(g));
+	Store_field(v, 7, caml_copy_int32(h));
+
+	CAMLreturn(v);
+}
+
 /*
  * Local variables:
  *  indent-tabs-mode: t
diff --git a/xen/arch/x86/cpu/amd.c b/xen/arch/x86/cpu/amd.c
index 83ab9f1..7b5ee61 100644
--- a/xen/arch/x86/cpu/amd.c
+++ b/xen/arch/x86/cpu/amd.c
@@ -134,7 +134,7 @@ static const struct cpuidmask *__init noinline get_cpuidmask(const char *opt)
  *
  * The processor revision string parameter has precedene.
  */
-static void __devinit set_cpuidmask(const struct cpuinfo_x86 *c)
+static void __devinit set_cpuidmask(struct cpuinfo_x86 *c)
 {
 	static unsigned int feat_ecx, feat_edx;
 	static unsigned int extfeat_ecx, extfeat_edx;
@@ -145,8 +145,11 @@ static void __devinit set_cpuidmask(const struct cpuinfo_x86 *c)
 	static enum { not_parsed, no_mask, set_mask } status;
 	unsigned int eax, ebx, ecx, edx;
 
+	cpuid(0x1, &eax, &ebx, &c->boot_base_ecx, &c->boot_base_edx);
+	cpuid(0x80000001, &eax, &ebx, &c->boot_ext_ecx, &c->boot_ext_edx);
+
 	if (status == no_mask)
-		return;
+		goto nomask;
 
 	if (status == set_mask)
 		goto setmask;
@@ -156,7 +159,7 @@ static void __devinit set_cpuidmask(const struct cpuinfo_x86 *c)
 
 	/* Fam11 doesn't support masking at all. */
 	if (c->x86 == 0x11)
-		return;
+		goto nomask;
 
 	if (~(opt_cpuid_mask_ecx & opt_cpuid_mask_edx &
 	      opt_cpuid_mask_ext_ecx & opt_cpuid_mask_ext_edx &
@@ -170,14 +173,14 @@ static void __devinit set_cpuidmask(const struct cpuinfo_x86 *c)
 		l7s0_ebx = opt_cpuid_mask_l7s0_ebx;
 		thermal_ecx = opt_cpuid_mask_thermal_ecx;
 	} else if (*opt_famrev == '\0') {
-		return;
+		goto nomask;
 	} else {
 		const struct cpuidmask *m = get_cpuidmask(opt_famrev);
 
 		if (!m) {
 			printk("Invalid processor string: %s\n", opt_famrev);
 			printk("CPUID will not be masked\n");
-			return;
+			goto nomask;
 		}
 		feat_ecx = m->ecx;
 		feat_edx = m->edx;
@@ -247,6 +250,18 @@ static void __devinit set_cpuidmask(const struct cpuinfo_x86 *c)
 		skip_thermal_ecx = 1;
 		printk("Failed to set CPUID thermal/power feature mask\n");
 	}
+
+	c->masked_base_ecx = feat_ecx;
+	c->masked_base_edx = feat_edx;
+	c->masked_ext_ecx  = extfeat_ecx;
+	c->masked_ext_edx  = extfeat_edx;
+	return;
+
+ nomask:
+	c->masked_base_ecx = c->boot_base_ecx;
+	c->masked_base_edx = c->boot_base_edx;
+	c->masked_ext_ecx  = c->boot_ext_ecx;
+	c->masked_ext_edx  = c->boot_ext_edx;
 }
 
 /*
diff --git a/xen/arch/x86/cpu/intel.c b/xen/arch/x86/cpu/intel.c
index 764d035..4c7c2f3 100644
--- a/xen/arch/x86/cpu/intel.c
+++ b/xen/arch/x86/cpu/intel.c
@@ -61,14 +61,18 @@ void set_cpuid_faulting(bool_t enable)
  * edx = 0xBFEBFBFF when executing CPUID.EAX = 1 normally. If you want to
  * 'rev down' to E8400, you can set these values in these Xen boot parameters.
  */
-static void __devinit set_cpuidmask(const struct cpuinfo_x86 *c)
+static void __devinit set_cpuidmask(struct cpuinfo_x86 *c)
 {
+	u32 eax, ebx;
 	static unsigned int msr_basic, msr_ext, msr_xsave;
 	static enum { not_parsed, no_mask, set_mask } status;
 	u64 msr_val;
 
+	cpuid(0x1, &eax, &ebx, &c->boot_base_ecx, &c->boot_base_edx);
+	cpuid(0x80000001, &eax, &ebx, &c->boot_ext_ecx, &c->boot_ext_edx);
+
 	if (status == no_mask)
-		return;
+		goto nomask;
 
 	if (status == set_mask)
 		goto setmask;
@@ -79,12 +83,12 @@ static void __devinit set_cpuidmask(const struct cpuinfo_x86 *c)
 	if (!~(opt_cpuid_mask_ecx & opt_cpuid_mask_edx &
 	       opt_cpuid_mask_ext_ecx & opt_cpuid_mask_ext_edx &
 	       opt_cpuid_mask_xsave_eax))
-		return;
+		goto nomask;
 
 	/* Only family 6 supports this feature. */
 	if (c->x86 != 6) {
 		printk("No CPUID feature masking support available\n");
-		return;
+		goto nomask;
 	}
 
 	switch (c->x86_model) {
@@ -166,6 +170,16 @@ static void __devinit set_cpuidmask(const struct cpuinfo_x86 *c)
 		msr_xsave = 0;
 		printk("Failed to set CPUID xsave feature mask\n");
 	}
+
+	cpuid(0x1, &eax, &ebx, &c->masked_base_ecx, &c->masked_base_edx);
+	cpuid(0x80000001, &eax, &ebx, &c->masked_ext_ecx, &c->masked_ext_edx);
+	return;
+
+ nomask:
+	c->masked_base_ecx = c->boot_base_ecx;
+	c->masked_base_edx = c->boot_base_edx;
+	c->masked_ext_ecx  = c->boot_ext_ecx;
+	c->masked_ext_edx  = c->boot_ext_edx;
 }
 
 void __devinit early_intel_workaround(struct cpuinfo_x86 *c)
diff --git a/xen/arch/x86/platform_hypercall.c b/xen/arch/x86/platform_hypercall.c
index 32f39b2..f57f8eb 100644
--- a/xen/arch/x86/platform_hypercall.c
+++ b/xen/arch/x86/platform_hypercall.c
@@ -760,6 +760,34 @@ ret_t do_platform_op(XEN_GUEST_HANDLE_PARAM(xen_platform_op_t) u_xenpf_op)
     }
     break;
 
+    case XENPF_get_cpu_features:
+    {
+        uint32_t cpu;
+
+        op->u.cpu_features.base_ecx = 0xffffffff;
+        op->u.cpu_features.base_edx = 0xffffffff;
+        op->u.cpu_features.ext_ecx = 0xffffffff;
+        op->u.cpu_features.ext_edx = 0xffffffff;
+        op->u.cpu_features.masked_base_ecx = 0xffffffff;
+        op->u.cpu_features.masked_base_edx = 0xffffffff;
+        op->u.cpu_features.masked_ext_ecx = 0xffffffff;
+        op->u.cpu_features.masked_ext_edx = 0xffffffff;
+        for_each_online_cpu( cpu )
+        {
+            op->u.cpu_features.base_ecx &= cpu_data[cpu].boot_base_ecx;
+            op->u.cpu_features.base_edx &= cpu_data[cpu].boot_base_edx;
+            op->u.cpu_features.ext_ecx  &= cpu_data[cpu].boot_ext_ecx;
+            op->u.cpu_features.ext_edx  &= cpu_data[cpu].boot_ext_edx;
+            op->u.cpu_features.masked_base_ecx &= cpu_data[cpu].masked_base_ecx;
+            op->u.cpu_features.masked_base_edx &= cpu_data[cpu].masked_base_edx;
+            op->u.cpu_features.masked_ext_ecx  &= cpu_data[cpu].masked_ext_ecx;
+            op->u.cpu_features.masked_ext_edx  &= cpu_data[cpu].masked_ext_edx;
+        }
+
+        ret = copy_to_guest(u_xenpf_op, op, 1) ? -EFAULT : 0;
+    }
+    break;
+
     default:
         ret = -ENOSYS;
         break;
diff --git a/xen/include/public/platform.h b/xen/include/public/platform.h
index 5c57615..229f109 100644
--- a/xen/include/public/platform.h
+++ b/xen/include/public/platform.h
@@ -560,6 +560,22 @@ struct xenpf_resource_op {
 typedef struct xenpf_resource_op xenpf_resource_op_t;
 DEFINE_XEN_GUEST_HANDLE(xenpf_resource_op_t);
 
+/* Get the CPUID feature lists before and after any hardware masks
+ * were applied.   Returns the ANDed aggregate of all online CPUs. */
+#define XENPF_get_cpu_features  511
+struct xenpf_cpu_features {
+    uint32_t base_ecx;          /* CPUID leaf 0x00000001:ECX */
+    uint32_t base_edx;          /* CPUID leaf 0x00000001:EDX */
+    uint32_t ext_ecx;           /* CPUID leaf 0x80000001:ECX */
+    uint32_t ext_edx;           /* CPUID leaf 0x80000001:EDX */
+    uint32_t masked_base_ecx;   /* CPUID leaf 0x00000001:ECX */
+    uint32_t masked_base_edx;   /* CPUID leaf 0x00000001:EDX */
+    uint32_t masked_ext_ecx;    /* CPUID leaf 0x80000001:ECX */
+    uint32_t masked_ext_edx;    /* CPUID leaf 0x80000001:EDX */
+};
+typedef struct xenpf_cpu_features xenpf_cpu_features_t;
+DEFINE_XEN_GUEST_HANDLE(xenpf_cpu_features_t);
+
 /*
  * ` enum neg_errnoval
  * ` HYPERVISOR_platform_op(const struct xen_platform_op*);
@@ -587,6 +603,7 @@ struct xen_platform_op {
         struct xenpf_mem_hotadd        mem_add;
         struct xenpf_core_parking      core_parking;
         struct xenpf_resource_op       resource_op;
+        struct xenpf_cpu_features      cpu_features;
         uint8_t                        pad[128];
     } u;
 };
