diff --git a/tools/xenguest/control.c b/tools/xenguest/control.c
index 68e96a6..31cdf1e 100644
--- a/tools/xenguest/control.c
+++ b/tools/xenguest/control.c
@@ -84,25 +84,76 @@ Example:
 
 
 */
+
+/*
+struct args_list {
+    struct args_list* next;
+    char *key;
+    char *value;
+};
+*/
+
+/*
+int size_args_list(struct args_list* alist, int* char_count) {
+  struct args_list* al = alist;
+
+  int count = 0;
+  int chars = 0;
+
+  while (al) {
+     count++;
+     chars += strlen(al->key) + strlen(al->value);
+     al = al->next;
+  }
+  *char_count = chars;
+  return count;
+}
+*/
+
+
+
+const char evt_mig_hdr[]= "{ \"event\" : \"MIGRATION\", \"data\": {";
+const char evt_mig_cmp[]= "\"status\":\"completed\"";
+const char evt_mig_res[]= "\"result\":\"";
+const char evnt_mig_ftr[]= "}}\n";
+
+int send_event_migrate_completed_result(struct demu_client cli, char* result)
+{
+   char msg[128];
+   int r; 
+
+   INFO("Sending event");
+   r = snprintf(msg, sizeof(msg), "%s%s,\"result\":\"%s\"%s", 
+               evt_mig_hdr, evt_mig_cmp, result, evnt_mig_ftr);
+   if (r < 0 || r >= sizeof(msg)) {
+        ERR("failed to sent compleat with result");
+        return -1;
+   }
+   return reply(cli, msg);
+}
+
+
 int send_event_migrate_completed(struct demu_client cli)
 {
-   char msg[256];
+   char msg[128];
    INFO("Sending event");
-   sprintf(msg, "{ \"event\" : \"MIGRATION\", \"data\": {\"status\":\"completed\"}}\n");
+
+   snprintf(msg,sizeof(msg), "%s%s%s", evt_mig_hdr, evt_mig_cmp, evnt_mig_ftr);
    return reply(cli, msg);
 }
 
 
+
 int send_event_migrate_progress(struct demu_client cli, int sent, int remaining, int iter)
 {
    char msg[256];
    char iters[60] = "";
 
    if (iter>=0)
-     sprintf(iters,",\"iteration\": %d", iter);
+     snprintf(iters, sizeof(iters), ",\"iteration\": %d", iter);
 
-   sprintf(msg, "{ \"event\" : \"MIGRATION\", \"data\": {"
-             "\"sent\": %d,\"remaining\": %d%s}}\n",sent, remaining, iters);
+   snprintf(msg, sizeof(msg), "%s\"sent\": %d,\"remaining\": %d%s%s",
+            evt_mig_hdr, sent, remaining, iters, evnt_mig_ftr);
 
    return reply(cli, msg);
 }
@@ -121,7 +172,7 @@ int send_event(struct demu_client cli, char* ret)
 int send_error(struct demu_client cli, char* ret)
 {
    char msg[256];
-   sprintf(msg, "{ \"error\" : \"%s\" }\n", ret);
+   snprintf(msg, sizeof(msg), "{ \"error\" : \"%s\" }\n", ret);
    return reply(cli, msg);
 }
 
@@ -134,7 +185,7 @@ void* run_thread(void *vargs) {
        args->is_locked = 0;
        pthread_mutex_unlock(args->lock);
    }
-
+   json_object_put(args->cmd_args);
    free(args);
    return NULL;
 }
@@ -196,8 +247,9 @@ int json_get_command(json_object * jobj, const char **cmd, json_object **params)
       if (*params) {
           return -1;
       }
-      else
+      else {
           *params= val;
+      }
  } else
      return -1;
 
@@ -256,6 +308,7 @@ static void process_message(struct demu_client cli, char* msg, int sent_fd)
    targs.cli = cli;
    targs.fd = sent_fd;
    targs.lock = NULL;
+   targs.cmd_args = params;
 
    for (i=0; i < cmd_number; i++) {
        struct command_actions *action = &runstate.actions[i];
@@ -277,9 +330,11 @@ static void process_message(struct demu_client cli, char* msg, int sent_fd)
               }
            }
 
-           if (action->in_thread)
+           if (action->in_thread) {
+                 json_object_get(params);
                  run_in_thread(action->func, &targs);
-              else 
+           }
+              else
                   action->func(&targs);
            return;
        }
@@ -509,40 +564,3 @@ int control_fdread(struct control_sock_inf *inf, fd_set *fds, int activity)
     return activity;
 }
 
-#if 0
-int main()
-{
-   struct control_sock_inf cs_inf;
-   int rc;
-
-   if (control_sock_init("./control",&cs_inf, myactions))
-       return 1;
-
-   for (;;) {
-
-        fd_set          rfds;
-        fd_set          wfds;
-        fd_set          xfds;
-        int             nfds;
-//        struct timeval  tv;
-
-        FD_ZERO(&rfds);
-        FD_ZERO(&wfds);
-        FD_ZERO(&xfds);
-//        tv.tv_sec = 10;
-//        tv.tv_usec = 0;
-
-        nfds = control_fdset(&cs_inf, &rfds);
-        nfds++;
-        rc = select(nfds, &rfds, &wfds, &xfds, NULL);
-
-        if (rc < 0 && errno != EINTR)
-            break;
-
-        if ( rc > 0)
-               rc = control_fdread(&cs_inf, &rfds, rc);
-
-    }
-    return 1;
-}
-#endif
diff --git a/tools/xenguest/control.h b/tools/xenguest/control.h
index d47a90a..2c3fc52 100644
--- a/tools/xenguest/control.h
+++ b/tools/xenguest/control.h
@@ -27,9 +27,19 @@ struct command_names _cmd_name[] = {                \
     {"quit", 0, cmd_quit}                           \
 }
 */
+
+
+struct args_list {
+    struct args_list* next;
+    char *key;
+    char *value;
+};
+
+
 struct threadargs {
     struct demu_client cli;
     int fd;
+    json_object *cmd_args;
     pthread_mutex_t *lock;
     int is_locked;
     void (*func)(struct threadargs *);
@@ -55,6 +65,7 @@ int control_fdset(struct control_sock_inf *inf, fd_set *fds);
 int control_fdread(struct control_sock_inf *inf, fd_set *fds, int activity);
 
 int send_event_migrate_completed(struct demu_client cli);
+int send_event_migrate_completed_result(struct demu_client cli, char* result);
 int send_event_migrate_progress(struct demu_client cli, int sent, int remaining, int iter);
 int send_return(struct demu_client cli, char* ret);
 int send_error(struct demu_client cli, char* ret);
diff --git a/tools/xenguest/emp.h b/tools/xenguest/emp.h
index c0f2b6b..4a0fe67 100644
--- a/tools/xenguest/emp.h
+++ b/tools/xenguest/emp.h
@@ -6,7 +6,9 @@ enum command_num {
     cmd_migrate_paused,
     cmd_migrate_progress,
     cmd_migrate_nonlive,
+    cmd_restore,
     cmd_quit,
+    cmd_set_args,
     cmd_number
 };
 
@@ -21,10 +23,12 @@ struct command_names _cmd_name[] = {                \
     {"migrate_abort",0, cmd_migrate_abort},         \
     {"migrate_init",1, cmd_migrate_init},           \
     {"migrate_live",0, cmd_migrate_live},           \
-    {"migrate_nonlive",0, cmd_migrate_nonlive },    \
+    {"migrate_nonlive",0, cmd_migrate_nonlive},     \
     {"migrate_pause",0, cmd_migrate_pause},         \
     {"migrate_paused",0, cmd_migrate_paused},       \
     {"migrate_progress",0, cmd_migrate_progress},   \
-    {"quit", 0, cmd_quit}                           \
+    {"quit", 0, cmd_quit},                          \
+    {"restore", 0, cmd_restore},                    \
+    {"set_args", 0, cmd_set_args}                   \
 }
 
diff --git a/tools/xenguest/xenguest.c b/tools/xenguest/xenguest.c
index cbe1965..826a1c6 100644
--- a/tools/xenguest/xenguest.c
+++ b/tools/xenguest/xenguest.c
@@ -654,6 +654,108 @@ void do_migrate_pause(struct threadargs *args)
    live_stop=1;
 }
 
+void do_cmd_restore(struct threadargs *args) 
+{
+    unsigned long store_mfn = 0, console_mfn = 0;
+    char buf[64];
+
+    if (domid == -1 || opt_fd == -1
+        || opt_store_port == -1 || opt_console_port == -1) {
+        xg_err("xenguest: missing command line options\n");
+        send_error(args->cli, "Missing options");
+        return;
+    }
+    send_return(args->cli, NULL);
+
+    stub_xc_domain_restore(opt_fd, opt_store_port, opt_console_port, true,
+                           &store_mfn, &console_mfn);
+
+    xg_info("Restore compleat, send result");
+    snprintf(buf, sizeof(buf) ,"%lu %lu", store_mfn, console_mfn );
+
+    if (progress_cli.num >= 0)
+       send_event_migrate_completed_result(progress_cli,buf);
+    if (progress_cli.num != args->cli.num)
+       send_event_migrate_completed_result(args->cli , buf);
+   xg_info("All done");
+}
+
+
+
+int str_lookup(const char* table[], char cmp[]) {
+    int i;
+    for (i=0; table[i]; i++) {
+        if (strcmp(table[i], cmp)==0)
+           return i;
+    }
+    return -1;
+}
+
+enum arg_keys {
+     unknown    = -1,
+     store_port = 0,
+     console_port
+};
+
+const char* setable_args[] = {"store_port", "console_port", NULL};
+
+
+void do_cmd_set_args(struct threadargs *args)
+{
+   json_object *jobj = args->cmd_args;
+   enum arg_keys key;
+   char* str_end;
+   const char* val;
+   int bad = 0;
+
+   if (jobj==NULL) {
+      xg_err("set_args called without any args");
+      send_error(args->cli, "No Args");
+      return;
+   }
+
+
+   json_object_object_foreach(jobj, s_key, jval) {
+
+      if (json_object_get_type(jval) != json_type_string) {
+          xg_err("expecting only string argemunts.  (%s)", s_key);
+          bad = 1;
+          continue;
+      }
+      val = json_object_get_string(jval);
+
+       key = str_lookup(setable_args, s_key);
+       switch (key) {
+       case store_port:
+            opt_store_port = strtol(val, &str_end, 10);
+            if (*str_end != '\0') {
+                 opt_store_port =-1;
+                 xg_err("Bad arge %s = %s", s_key, val);
+                 bad = 1;
+            }
+            xg_info("store port = %d", opt_store_port);
+       break;
+       case console_port:
+
+            opt_console_port = strtol(val, &str_end, 10);
+            if (*str_end != '\0') {
+                 opt_console_port =-1;
+                 xg_err("Bad arge %s = %s", s_key, val);
+                 bad = 1;
+            }
+            xg_info("console port = %d", opt_console_port);
+       break;
+       default:
+           xg_err("Unknown arg: %s", s_key);
+       }
+   }
+   if (bad) {
+      send_error(args->cli, "Bad Args");
+   } else {
+      send_return(args->cli, NULL);
+   }
+}
+
 struct command_actions actions[] = {
     {cmd_migrate_abort,    &not_supported, 0 },
     {cmd_migrate_init,     &do_migrate_init, 0 },
@@ -662,6 +764,8 @@ struct command_actions actions[] = {
     {cmd_migrate_paused,   &do_migrate_paused, 0 },
     {cmd_migrate_progress, &do_cmd_progress,  0 },
     {cmd_migrate_nonlive,  &do_migrate_nonlive, 1},
+    {cmd_restore,          &do_cmd_restore, 1 },
+    {cmd_set_args,         &do_cmd_set_args, 0},
     {cmd_quit,             &do_cmd_quit,      0 }
 };
 
@@ -800,7 +904,7 @@ int main(int argc, char * const argv[])
             suffix = "-save";
             break;
         case XG_MODE_LISTEN:
-            suffix = "-esave";
+            suffix = "-emp";
             break;
 
         case XG_MODE_RESTORE:
