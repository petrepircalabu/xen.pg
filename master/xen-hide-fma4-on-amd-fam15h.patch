diff --git a/xen/arch/x86/cpu/amd.c b/xen/arch/x86/cpu/amd.c
index 566cdac..83ab9f1 100644
--- a/xen/arch/x86/cpu/amd.c
+++ b/xen/arch/x86/cpu/amd.c
@@ -427,7 +427,7 @@ static void __devinit amd_get_topology(struct cpuinfo_x86 *c)
 static void __devinit init_amd(struct cpuinfo_x86 *c)
 {
 	u32 l, h;
-
+	static bool_t automatic_fma4_hiding = 0;
 	unsigned long long value;
 
 	/* Disable TLB flush filter by setting HWCR.FFDIS on K8
@@ -615,8 +615,32 @@ static void __devinit init_amd(struct cpuinfo_x86 *c)
 	if ((smp_processor_id() == 1) && c1_ramping_may_cause_clock_drift(c))
 		disable_c1_ramping();
 
+	/* Bugfix for Ubuntu 12.04 installer.  XSAVE is not enabled by default
+	 * on XenSever, but glibc in 12.04 incorrectly tried to AVX
+	 * instructions, and dies with an illegal opcode exception.  If the
+	 * user has not explicitly requested XSAVE support, mask out FMA4 to
+	 * prevent glibc from falling over. */
+	if ( !use_xsave && (c == &boot_cpu_data) &&
+	     (c->x86 == 0x15) && (c->x86_model <= 0x02) &&
+	     !(opt_cpuid_mask_ext_ecx & cpufeat_mask(X86_FEATURE_FMA4)) )
+	{
+		printk(KERN_DEBUG "CPU: Masking FMA4 CPUID feature\n");
+		automatic_fma4_hiding = 1;
+		opt_cpuid_mask_ext_ecx &= ~cpufeat_mask(X86_FEATURE_FMA4);
+	}
+
 	set_cpuidmask(c);
 
+	/*
+	 * Put FMA4 feature back into mask variables IFF it was not masked on
+	 * command line, so XAPI allows Rolling Pool Upgrade to work
+	 */
+	if ( automatic_fma4_hiding )
+	{
+		c->boot_ext_ecx   |= cpufeat_mask(X86_FEATURE_FMA4);
+		c->masked_ext_ecx |= cpufeat_mask(X86_FEATURE_FMA4);
+	}
+
 	check_syscfg_dram_mod_en();
 }
 
diff --git a/xen/arch/x86/cpu/common.c b/xen/arch/x86/cpu/common.c
index 910f5d3..5a95628 100644
--- a/xen/arch/x86/cpu/common.c
+++ b/xen/arch/x86/cpu/common.c
@@ -15,7 +15,7 @@
 
 #include "cpu.h"
 
-static bool_t __cpuinitdata use_xsave = 0;
+bool_t __cpuinitdata use_xsave = 0;
 boolean_param("xsave", use_xsave);
 
 bool_t __devinitdata opt_arat = 1;
diff --git a/xen/arch/x86/cpu/cpu.h b/xen/arch/x86/cpu/cpu.h
index 68563bb..e3ad9ce 100644
--- a/xen/arch/x86/cpu/cpu.h
+++ b/xen/arch/x86/cpu/cpu.h
@@ -14,6 +14,7 @@ extern bool_t opt_arat;
 extern unsigned int opt_cpuid_mask_ecx, opt_cpuid_mask_edx;
 extern unsigned int opt_cpuid_mask_xsave_eax;
 extern unsigned int opt_cpuid_mask_ext_ecx, opt_cpuid_mask_ext_edx;
+extern bool_t use_xsave;
 
 extern int get_model_name(struct cpuinfo_x86 *c);
 extern void display_cacheinfo(struct cpuinfo_x86 *c);
