diff --git a/tools/include/xen-sys/Linux/privcmd.h b/tools/include/xen-sys/Linux/privcmd.h
index 5be860a..2a7e297 100644
--- a/tools/include/xen-sys/Linux/privcmd.h
+++ b/tools/include/xen-sys/Linux/privcmd.h
@@ -75,6 +75,10 @@ typedef struct privcmd_mmapbatch_v2 {
 	int __user *err;  /* array of error codes */
 } privcmd_mmapbatch_v2_t;
 
+typedef struct privcmd_restrict_domid {
+	domid_t domid;
+} privcmd_restrict_domid_t;
+
 /*
  * @cmd: IOCTL_PRIVCMD_HYPERCALL
  * @arg: &privcmd_hypercall_t
@@ -88,5 +92,7 @@ typedef struct privcmd_mmapbatch_v2 {
 	_IOC(_IOC_NONE, 'P', 3, sizeof(privcmd_mmapbatch_t))
 #define IOCTL_PRIVCMD_MMAPBATCH_V2				\
 	_IOC(_IOC_NONE, 'P', 4, sizeof(privcmd_mmapbatch_v2_t))
+#define IOCTL_PRIVCMD_RESTRICT_DOMID				\
+	_IOC(_IOC_NONE, 'P', 100, sizeof(privcmd_restrict_domid_t))
 
 #endif /* __LINUX_PUBLIC_PRIVCMD_H__ */
diff --git a/tools/libxc/include/xenctrl.h b/tools/libxc/include/xenctrl.h
index 4adf90c..43c0866 100644
--- a/tools/libxc/include/xenctrl.h
+++ b/tools/libxc/include/xenctrl.h
@@ -187,6 +187,11 @@ enum xc_open_flags {
 int xc_interface_close(xc_interface *xch);
 
 /**
+ * Restrict interface to a given domain
+ */
+int xc_interface_restrict(xc_interface *xch, uint32_t domid);
+
+/**
  * Query the active OS interface (i.e. that which would be returned by
  * xc_interface_open) to find out if it is fake (i.e. backends onto
  * something other than an actual Xen hypervisor).
diff --git a/tools/libxc/include/xenctrlosdep.h b/tools/libxc/include/xenctrlosdep.h
index e97944b..d55a0bd 100644
--- a/tools/libxc/include/xenctrlosdep.h
+++ b/tools/libxc/include/xenctrlosdep.h
@@ -89,6 +89,7 @@ struct xc_osdep_ops
             void *(*map_foreign_ranges)(xc_interface *xch, xc_osdep_handle h, uint32_t dom, size_t size, int prot,
                                         size_t chunksize, privcmd_mmap_entry_t entries[],
                                         int nentries);
+            int (*restrict_to_domain)(xc_interface *xch, xc_osdep_handle h, uint32_t dom);
         } privcmd;
         struct {
             int (*fd)(xc_evtchn *xce, xc_osdep_handle h);
diff --git a/tools/libxc/xc_linux_osdep.c b/tools/libxc/xc_linux_osdep.c
index a19e4b6..b6c435a 100644
--- a/tools/libxc/xc_linux_osdep.c
+++ b/tools/libxc/xc_linux_osdep.c
@@ -134,6 +134,13 @@ static int linux_privcmd_hypercall(xc_interface *xch, xc_osdep_handle h, privcmd
     return ioctl(fd, IOCTL_PRIVCMD_HYPERCALL, hypercall);
 }
 
+static int linux_privcmd_restrict(xc_interface *xch, xc_osdep_handle h, uint32_t dom)
+{
+    int fd = (int)h;
+    struct privcmd_restrict_domid restrict_domid = { dom };
+    return ioctl(fd, IOCTL_PRIVCMD_RESTRICT_DOMID, &restrict_domid);
+}
+
 static int xc_map_foreign_batch_single(int fd, uint32_t dom,
                                        xen_pfn_t *mfn, unsigned long addr)
 {
@@ -448,6 +455,8 @@ static struct xc_osdep_ops linux_privcmd_ops = {
         .map_foreign_bulk = &linux_privcmd_map_foreign_bulk,
         .map_foreign_range = &linux_privcmd_map_foreign_range,
         .map_foreign_ranges = &linux_privcmd_map_foreign_ranges,
+
+        .restrict_to_domain = &linux_privcmd_restrict,
     },
 };
 
diff --git a/tools/libxc/xc_private.c b/tools/libxc/xc_private.c
index 45537af..7a6cbcc 100644
--- a/tools/libxc/xc_private.c
+++ b/tools/libxc/xc_private.c
@@ -247,6 +247,12 @@ int xc_interface_close(xc_interface *xch)
     return xc_interface_close_common(xch);
 }
 
+int xc_interface_restrict(xc_interface *xch, uint32_t domid)
+{
+    if (!xch->ops->u.privcmd.restrict_to_domain)
+        return -1;
+    return xch->ops->u.privcmd.restrict_to_domain(xch, xch->ops_handle, domid);
+}
 
 int do_xen_hypercall(xc_interface *xch, privcmd_hypercall_t *hypercall)
 {
