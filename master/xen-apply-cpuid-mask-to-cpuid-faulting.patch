Use the boot CPUID mask parameters in the PV CPUID GP fault handler.

Intel Ivy Bridge and newer processors use CPUID faulting instead of masking, this results in guest trapping to the PV GP fault handler. The fault handler was returning the bare metal CPUID and hypervisor specific masks but was not applying the boot CPUID mask parameters.

This patch always applies the boot CPUID mask parameters, this feature could be upstreamed and maybe a compile/runtime option.


Header from folded patch 'fix-cpuid-faulting.patch':

# HG changeset patch
# Parent 54d00046f13df94d35c4d8782f445970346f5da8
diff --git a/xen/arch/x86/hvm/hvm.c b/xen/arch/x86/hvm/hvm.c
index 2754b2d..ac27c60 100644
--- a/xen/arch/x86/hvm/hvm.c
+++ b/xen/arch/x86/hvm/hvm.c
@@ -68,6 +68,7 @@
 #include <public/memory.h>
 #include <public/vm_event.h>
 #include <public/arch-x86/cpuid.h>
+#include "../cpu/cpu.h"
 
 bool_t __read_mostly hvm_enabled;
 
@@ -4291,6 +4292,23 @@ void hvm_cpuid(unsigned int input, unsigned int *eax, unsigned int *ebx,
 
     domain_cpuid(d, input, count, eax, ebx, ecx, edx);
 
+    /* Apply boot masks to CPUID instruction if CPU faulting is enabled */
+    if ( cpu_has_cpuid_faulting )
+    {
+        if ( input == 1 )
+        {
+            *ecx &= opt_cpuid_mask_ecx;
+            *edx &= opt_cpuid_mask_edx;
+        }
+        else if ( input == 0x80000001 )
+        {
+            *ecx &= opt_cpuid_mask_ext_ecx;
+            *edx &= opt_cpuid_mask_ext_edx;
+        }
+        else if ( input == 0xd && count == 0x1 )
+            *eax &= opt_cpuid_mask_xsave_eax;
+    }
+
     switch ( input )
     {
         unsigned int sub_leaf, _eax, _ebx, _ecx, _edx;
diff --git a/xen/arch/x86/traps.c b/xen/arch/x86/traps.c
index 4a5c04b..3ce358e 100644
--- a/xen/arch/x86/traps.c
+++ b/xen/arch/x86/traps.c
@@ -75,6 +75,8 @@
 #include <public/arch-x86/cpuid.h>
 #include <xsm/xsm.h>
 
+#include "cpu/cpu.h"
+
 /*
  * opt_nmi: one of 'ignore', 'dom0', or 'fatal'.
  *  fatal:  Xen prints diagnostic message and then hangs.
@@ -859,6 +861,23 @@ void pv_cpuid(struct cpu_user_regs *regs)
 
     cpuid_count(a, c, &a, &b, &c, &d);
 
+    /* Apply boot masks to CPUID instruction if CPU faulting is enabled */
+    if ( cpu_has_cpuid_faulting )
+    {
+        if ( regs->eax == 1 )
+        {
+            c &= opt_cpuid_mask_ecx;
+            d &= opt_cpuid_mask_edx;
+        }
+        else if ( regs->eax == 0x80000001 )
+        {
+            c &= opt_cpuid_mask_ext_ecx;
+            d &= opt_cpuid_mask_ext_edx;
+        }
+        else if ( regs->eax == 0xd && regs->ecx == 0x1 )
+            a &= opt_cpuid_mask_xsave_eax;
+    }
+
     if ( (regs->eax & 0x7fffffff) == 0x00000001 )
     {
         /* Modify Feature Information. */
