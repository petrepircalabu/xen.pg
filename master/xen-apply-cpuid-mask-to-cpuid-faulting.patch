Use the boot CPUID mask parameters in the PV CPUID GP fault handler.

Intel Ivy Bridge and newer processors use CPUID faulting instead of masking, this results in guest trapping to the PV GP fault handler. The fault handler was returning the bare metal CPUID and hypervisor specific masks but was not applying the boot CPUID mask parameters.

This patch always applies the boot CPUID mask parameters, this feature could be upstreamed and maybe a compile/runtime option.

diff --git a/xen/arch/x86/traps.c b/xen/arch/x86/traps.c
index 8f66095..a08a281 100644
--- a/xen/arch/x86/traps.c
+++ b/xen/arch/x86/traps.c
@@ -75,6 +75,8 @@
 #include <public/arch-x86/cpuid.h>
 #include <xsm/xsm.h>
 
+#include "cpu/cpu.h"
+
 /*
  * opt_nmi: one of 'ignore', 'dom0', or 'fatal'.
  *  fatal:  Xen prints diagnostic message and then hangs.
@@ -797,6 +799,23 @@ void pv_cpuid(struct cpu_user_regs *regs)
         : "=a" (a), "=b" (b), "=c" (c), "=d" (d)
         : "0" (a), "1" (b), "2" (c), "3" (d) );
 
+	/* Apply boot masks to CPUID instruction if CPU faulting is enabled */
+	if ( cpu_has_cpuid_faulting )
+	{
+		if ( regs->eax == 1 )
+		{
+			c &= opt_cpuid_mask_ecx;
+			d &= opt_cpuid_mask_edx;
+		}
+		else if ( regs->eax == 0x80000001 )
+		{
+			c &= opt_cpuid_mask_ext_ecx;
+			d &= opt_cpuid_mask_ext_edx;
+		}
+		else if ( regs->eax == 0xd && regs->ecx == 0x1 )
+			a &= opt_cpuid_mask_xsave_eax;
+	}
+
     if ( (regs->eax & 0x7fffffff) == 0x00000001 )
     {
         /* Modify Feature Information. */
