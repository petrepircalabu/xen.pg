From 425e6cf31d03fa23e7b6ced9bbd84e4f5e100775 Mon Sep 17 00:00:00 2001
From: Andrew Cooper <andrew.cooper3@citrix.com>
Date: Sun, 19 Jul 2015 19:34:35 +0100
Subject: [PATCH 3/3] x86/pv: smap=fixup workaround for 32bit PV guests

Introduce `smap=fixup` as a workaround for 32bit PV guests unaware of SMAP.

It works by setting EFLAGS.AC on a SMAP fault, as if the guest kernel had used
`stac` to indicate a deliberate userspace access.  In doing so, CR0.AM must
also be disabled, as some guests have been observed to leak kernel EFLAGS into
userspace not designed to function with alignment checking enforced.

Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
CC: Jan Beulich <JBeulich@suse.com>

diff --git a/docs/misc/xen-command-line.markdown b/docs/misc/xen-command-line.markdown
index 51ea4ef..bddd9ae 100644
--- a/docs/misc/xen-command-line.markdown
+++ b/docs/misc/xen-command-line.markdown
@@ -1297,9 +1297,9 @@ Set the serial transmit buffer size.
 Flag to enable Supervisor Mode Execution Protection
 
 ### smap
-> `= <boolean>`
+> `= <boolean> | fixup`
 
-> Default: `true`
+> Default: `fixup`
 
 Handling of Supervisor Mode Access Prevention.
 
@@ -1309,6 +1309,16 @@ suffer unexpected pagefaults which it cannot handle. (Experimentally, there
 are 32bit PV guests which fall foul of SMAP enforcement and spin in an
 infinite loop taking pagefaults early on boot.)
 
+A SMAP mode of **fixup** causes Xen to disable `CR0.AM` in the context of a
+32bit PV guest, and set `EFLAGS.AC` when a SMAP pagefault occurs.  Setting
+`EFLAGS.AC` is to emulate the guest kernel using `stac` to mark a userspace
+access as deliberate.  Clearing of `CR0.AM` is to work around the fact that
+certain guests leak the kernel EFLAGS state into user context, causing issues
+for userspace binaries which do not expect alignment checking to be enforced.
+
+**NOTE: `fixup` is a guest-visible ABI alteration, and heuristic which
+modifies guest state behind its back.**
+
 ### snb\_igd\_quirk
 > `= <boolean> | cap | <integer>`
 
diff --git a/xen/arch/x86/domain.c b/xen/arch/x86/domain.c
index 800bffa..03a1469 100644
--- a/xen/arch/x86/domain.c
+++ b/xen/arch/x86/domain.c
@@ -1039,6 +1039,13 @@ int arch_set_info_guest(
     /* Only CR0.TS is modifiable by guest or admin. */
     v->arch.pv_vcpu.ctrlreg[0] &= X86_CR0_TS;
     v->arch.pv_vcpu.ctrlreg[0] |= read_cr0() & ~X86_CR0_TS;
+    /*
+     * Clear the AM bit if fixing up for SMAP purposes to prevent a later
+     * mismatch between what the guest gets when it reads CR0 and its
+     * actual CR0.
+     */
+    if ( (smap_mode == smap_mode_fixup) && is_pv_32bit_vcpu(v) )
+        v->arch.pv_vcpu.ctrlreg[0] &= ~X86_CR0_AM;
 
     cr4 = v->arch.pv_vcpu.ctrlreg[4];
     pv_cr4_write(v, cr4);
@@ -1506,6 +1513,10 @@ static void paravirt_ctxt_switch_from(struct vcpu *v)
      */
     if ( unlikely(v->arch.debugreg[7] & DR7_ACTIVE_MASK) )
         write_debugreg(7, 0);
+
+    /* Restore CR0.AM if we disabled it for SMAP fixup purposes. */
+    if ( (smap_mode == smap_mode_fixup) && is_pv_32bit_vcpu(v) )
+        write_cr0(read_cr0() | X86_CR0_AM);
 }
 
 static void paravirt_ctxt_switch_to(struct vcpu *v)
@@ -1525,6 +1536,14 @@ static void paravirt_ctxt_switch_to(struct vcpu *v)
     if ( (v->domain->arch.tsc_mode ==  TSC_MODE_PVRDTSCP) &&
          boot_cpu_has(X86_FEATURE_RDTSCP) )
         write_rdtscp_aux(v->domain->arch.incarnation);
+
+    /*
+     * Proactively clear CR0.AM if fixing up for SMAP purposes.  Some guest
+     * kernels leak their flags into user context, causing problems for
+     * userspace not expecting to be subject to alignment checking.
+     */
+    if ( (smap_mode == smap_mode_fixup) && is_pv_32bit_vcpu(v) )
+        write_cr0(read_cr0() & ~X86_CR0_AM);
 }
 
 /* Update per-VCPU guest runstate shared memory area (if registered). */
diff --git a/xen/arch/x86/setup.c b/xen/arch/x86/setup.c
index e714a64..f59fd9b 100644
--- a/xen/arch/x86/setup.c
+++ b/xen/arch/x86/setup.c
@@ -134,7 +134,7 @@ static void __init parse_acpi_param(char *s)
     }
 }
 
-enum xen_smap_mode smap_mode __read_mostly = smap_mode_enable;
+enum xen_smap_mode smap_mode __read_mostly = smap_mode_fixup;
 static void __init parse_smap(char *s)
 {
     switch ( parse_bool(s) )
@@ -148,6 +148,8 @@ static void __init parse_smap(char *s)
         break;
 
     default:
+        if ( !strcmp(s, "fixup") )
+            smap_mode = smap_mode_fixup;
         break;
     }
 }
diff --git a/xen/arch/x86/traps.c b/xen/arch/x86/traps.c
index 08d4098..54568b3 100644
--- a/xen/arch/x86/traps.c
+++ b/xen/arch/x86/traps.c
@@ -1466,6 +1466,14 @@ static int fixup_page_fault(unsigned long addr, struct cpu_user_regs *regs)
         {
             /* Latch this domain for SMAP workarounds. */
             d->arch.pv_domain.smap_workaround = 1;
+
+            /* Fixing up SMAP faults? Set EFLAGS.AC, clear CR0.AM, and retry. */
+            if ( (smap_mode == smap_mode_fixup) &&
+                 !(regs->eflags & X86_EFLAGS_AC) )
+            {
+                regs->eflags |= X86_EFLAGS_AC;
+                return EXCRET_fault_fixed;
+            }
         }
     }
 
diff --git a/xen/include/asm-x86/processor.h b/xen/include/asm-x86/processor.h
index a0738ca..ace09e0 100644
--- a/xen/include/asm-x86/processor.h
+++ b/xen/include/asm-x86/processor.h
@@ -584,6 +584,7 @@ void pv_cpuid(struct cpu_user_regs *regs);
 enum xen_smap_mode {
     smap_mode_disable, /* Don't use SMAP.                                    */
     smap_mode_enable,  /* Use SMAP.                                          */
+    smap_mode_fixup,   /* Context switch CR0.AM, and set ELFAGS.AC on fault. */
 };
 extern enum xen_smap_mode smap_mode;
 
