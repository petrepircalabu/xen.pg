Extra memory access restrictions for CC evaluations.

1  "A mechanism must be provided for configuring the hypervisor to
disallow shared memory channels between domUs. If the hypervisor is put
into 'disable shared channels mode' and a hypercall is made that would
result in a shared memory channel being set up between domUs then this
call should fail with a defined error code."

2  "A mechanism must be provided for configuring the hypervisor to
disallow domUs from voluntarily returning pages to the hypervisor. If
this hypervisor is put into 'disable voluntarily returned pages' mode
and a hypercall is made by which a guest voluntarily attempting to
return pages, then this call should fail with a defined error code."

Unfortunately, 2 is not completely possible, as p2m holes are required to be
able to access the shared info and grant status frames.  In these cases, Xen
scrubs returned pages to avoid data leaks.

Actually enabling these restrictions breaks many things (some PV
kernels, any balloon drivers, v2v channels. etc) but should be OK for
the particular configuration under test.

diff --git a/xen/arch/x86/mm.c b/xen/arch/x86/mm.c
index ba516bc..a44ce68 100644
--- a/xen/arch/x86/mm.c
+++ b/xen/arch/x86/mm.c
@@ -4630,6 +4630,15 @@ int xenmem_add_to_physmap_one(
     prev_mfn = mfn_x(get_gfn(d, gpfn, &p2mt));
     if ( mfn_valid(prev_mfn) )
     {
+        if ( opt_cc_restrictions )
+        {
+            /* CC-restricted guests can't use XATP+aliasing to
+             * sneakily free domain memory */
+            domain_unlock(d);
+            rcu_unlock_domain(d);
+            return -EPERM;
+        }
+
         if ( is_xen_heap_mfn(prev_mfn) )
             /* Xen heap frames are simply unhooked from this phys slot. */
             guest_physmap_remove_page(d, gpfn, prev_mfn, PAGE_ORDER_4K);
diff --git a/xen/arch/x86/setup.c b/xen/arch/x86/setup.c
index 73e95c6..219b0c3 100644
--- a/xen/arch/x86/setup.c
+++ b/xen/arch/x86/setup.c
@@ -92,6 +92,10 @@ unsigned long __initdata highmem_start;
 size_param("highmem-start", highmem_start);
 #endif
 
+/* CC evaluation more with extra restrictions on guest activity */
+bool_t opt_cc_restrictions = 0;
+boolean_param("cc-restrictions", opt_cc_restrictions);
+
 cpumask_t __read_mostly cpu_present_map;
 
 unsigned long __read_mostly xen_phys_start;
@@ -1401,6 +1405,9 @@ void __init noreturn __start_xen(unsigned long mbi_p)
     if ( cpu_has_smap )
         write_cr4(read_cr4() & ~X86_CR4_SMAP);
 
+    if ( opt_cc_restrictions )
+        printk("CC restrictions are in force\n");
+
     /*
      * We're going to setup domain0 using the module(s) that we stashed safely
      * above our heap. The second module, if present, is an initrd ramdisk.
diff --git a/xen/common/compat/grant_table.c b/xen/common/compat/grant_table.c
index 0368289..9e5f9e8 100644
--- a/xen/common/compat/grant_table.c
+++ b/xen/common/compat/grant_table.c
@@ -63,6 +63,14 @@ int compat_grant_table_op(unsigned int cmd,
     unsigned int i, cmd_op;
     XEN_GUEST_HANDLE_PARAM(void) cnt_uop;
 
+    /* In CC restricted mode, unprivileged guests can't use the grant
+     * table mechanism to access other guests' memory */
+    if ( unlikely(opt_cc_restrictions) &&
+         !is_hardware_domain(current->domain) &&
+         cmd != GNTTABOP_query_size &&
+         cmd != GNTTABOP_setup_table )
+        return -EPERM;
+
     set_xen_guest_handle(cnt_uop, NULL);
     cmd_op = cmd & GNTTABOP_CMD_MASK;
     switch ( cmd_op )
diff --git a/xen/common/grant_table.c b/xen/common/grant_table.c
index 0010715..f279868 100644
--- a/xen/common/grant_table.c
+++ b/xen/common/grant_table.c
@@ -2725,6 +2725,14 @@ do_grant_table_op(
     if ( (int)count < 0 )
         return -EINVAL;
     
+    /* In CC restricted mode, unprivileged guests can't use the grant
+     * table mechanism to access other guests' memory */
+    if ( unlikely(opt_cc_restrictions) &&
+         !is_hardware_domain(current->domain) &&
+         cmd != GNTTABOP_query_size &&
+         cmd != GNTTABOP_setup_table )
+        return -EPERM;
+
     rc = -EFAULT;
     switch ( cmd &= GNTTABOP_CMD_MASK )
     {
diff --git a/xen/common/memory.c b/xen/common/memory.c
index 9f21bd3..4736ccf 100644
--- a/xen/common/memory.c
+++ b/xen/common/memory.c
@@ -253,6 +253,16 @@ int guest_remove_page(struct domain *d, unsigned long gmfn)
 
     guest_physmap_remove_page(d, gmfn, mfn, 0);
 
+    /*
+     * In CC restricted mode, unprivileged guests shouldn't be able to
+     * voluntarily return memory to Xen.  Unfortunately, a few decrease
+     * reservations are required to be able to access the shared info and
+     * grant status frames.  For unprivileged guests, scrub any released pages
+     * to avoid leaking any content.
+     */
+    if ( unlikely(opt_cc_restrictions) && !is_hardware_domain(d) )
+        clear_domain_page(mfn);
+
     put_page(page);
     put_gfn(d, gmfn);
 
@@ -703,6 +713,17 @@ long do_memory_op(unsigned long cmd, XEN_GUEST_HANDLE_PARAM(void) arg)
     unsigned long start_extent = cmd >> MEMOP_EXTENT_SHIFT;
     int op = cmd & MEMOP_CMD_MASK;
 
+    /*
+     * In CC restricted mode, unprivileged guests shouldn't be able to
+     * voluntarily return memory to Xen.  Unfortunately, a few decrease
+     * reservations are required to be able to access the shared info and
+     * grant status frames.  This is made safe in guest_remove_page().
+     */
+    if ( unlikely(opt_cc_restrictions) &&
+         !is_hardware_domain(current->domain) &&
+         (op == XENMEM_exchange) )
+        return -EPERM;
+
     switch ( op )
     {
     case XENMEM_increase_reservation:
diff --git a/xen/include/xen/mm.h b/xen/include/xen/mm.h
index 74a65a6..d9f26eb 100644
--- a/xen/include/xen/mm.h
+++ b/xen/include/xen/mm.h
@@ -398,4 +398,8 @@ int prepare_ring_for_helper(struct domain *d, unsigned long gmfn,
                             struct page_info **_page, void **_va);
 void destroy_ring_for_helper(void **_va, struct page_info *page);
 
+/* CC evaluation mode.  If set, unprivileged guests can't relinquish
+ * memory, or use grant tables to access other guests' memory. */
+extern bool_t opt_cc_restrictions;
+
 #endif /* __XEN_MM_H__ */
