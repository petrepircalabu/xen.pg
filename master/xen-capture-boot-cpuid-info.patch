capture CPUID boot parameters when Intel CPUID faulting is used.

The CPUID boot parameters used for the non upstream XENPF_get_cpu_features hypervcall where only captured in the Intel CPUID masking code path. Intel Ivy Bridge CPU's use CPUID faulting instead of CPUID masking and this resulted in the XENPF_get_cpu_features hypercall returning all zero's for CPUID fields.

This patch has been implemented in a way to result in minimal change to other code due to the proximity to Tampa release. The capturing of pre masking CPUID field should be performed in a common location and the functionality should be upstreamed.

diff --git a/xen/arch/x86/cpu/intel.c b/xen/arch/x86/cpu/intel.c
index db25b2c..95f7d47 100644
--- a/xen/arch/x86/cpu/intel.c
+++ b/xen/arch/x86/cpu/intel.c
@@ -18,11 +18,23 @@
 
 #define select_idle_routine(x) ((void)0)
 
-static unsigned int probe_intel_cpuid_faulting(void)
+static unsigned int probe_intel_cpuid_faulting(struct cpuinfo_x86 *c)
 {
 	uint64_t x;
-	return !rdmsr_safe(MSR_INTEL_PLATFORM_INFO, x) &&
+	unsigned int result;
+	u32 eax, ebx;
+	result = !rdmsr_safe(MSR_INTEL_PLATFORM_INFO, x) &&
 		(x & MSR_PLATFORM_INFO_CPUID_FAULTING);
+	if (result) {
+		cpuid(0x1, &eax, &ebx, &c->boot_base_ecx, &c->boot_base_edx);
+		cpuid(0x80000001, &eax, &ebx, &c->boot_ext_ecx, &c->boot_ext_edx);
+		c->masked_base_ecx = c->boot_base_ecx & opt_cpuid_mask_ecx;
+		c->masked_base_edx = c->boot_base_edx & opt_cpuid_mask_edx;
+		c->masked_ext_ecx = c->boot_ext_ecx & opt_cpuid_mask_ext_ecx;
+		c->masked_ext_edx = c->boot_ext_edx & opt_cpuid_mask_ext_edx;
+	}
+
+	return result;
 }
 
 static DEFINE_PER_CPU(bool_t, cpuid_faulting_enabled);
@@ -288,10 +300,10 @@ static void __devinit init_intel(struct cpuinfo_x86 *c)
 	}
 
 	if (c == &boot_cpu_data && c->x86 == 6) {
-		if (probe_intel_cpuid_faulting())
+		if (probe_intel_cpuid_faulting(c))
 			set_bit(X86_FEATURE_CPUID_FAULTING, c->x86_capability);
 	} else if (boot_cpu_has(X86_FEATURE_CPUID_FAULTING)) {
-		BUG_ON(!probe_intel_cpuid_faulting());
+		BUG_ON(!probe_intel_cpuid_faulting(c));
 		set_bit(X86_FEATURE_CPUID_FAULTING, c->x86_capability);
 	}
 
diff --git a/xen/include/asm-x86/processor.h b/xen/include/asm-x86/processor.h
index 35368b0..33e8a75 100644
--- a/xen/include/asm-x86/processor.h
+++ b/xen/include/asm-x86/processor.h
@@ -180,6 +180,10 @@ struct cpuinfo_x86 {
     int  cpuid_level;    /* Maximum supported CPUID level, -1=no CPUID */
     __u32 extended_cpuid_level; /* Maximum supported CPUID extended level */
     unsigned int x86_capability[NCAPINTS];
+    unsigned int boot_base_ecx, boot_base_edx;
+    unsigned int boot_ext_ecx, boot_ext_edx;
+    unsigned int masked_base_ecx, masked_base_edx;
+    unsigned int masked_ext_ecx, masked_ext_edx;
     char x86_vendor_id[16];
     char x86_model_id[64];
     int  x86_cache_size; /* in KB - valid for CPUS which support this call  */
