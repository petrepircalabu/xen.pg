XenServer changes to Xen command line default options.

* fatal nmis even in regular builds.  dom0 is not generally capable of dealing
  with nmis it gets, causing serious errors to be obscured.

* forceful watchdog by default.  Should allow IPMI "inject NMI" options on
  Dell/IBM/SuperMicro servers to work in combination with the watchdog.

* disable APICv.  Temporary until we can debug why it causes loss of VM
  interrupts when migrating between APICv and non APICv-capable hardware.

* Console timestamps (Linux style)

* Console ring size bumped up to 64k

* Limit host ram to 5TB

* Assume UC mappings for unknown EFI cacheability (firmware workarounds)

* Always probe for RTC if the the ACPI tables claim it isn't present.  HP Gen9
  servers erroneously claim that an RTC is not present, which breaks legacy
  boot.

* Increase default number of guest PIRQs. Bring the default number of PIRQs
  from 32 to 64.

* Allow dom0 to create cached mappings of reserved regions.

diff --git a/xen/arch/x86/e820.c b/xen/arch/x86/e820.c
index ef077a5..409c2b6 100644
--- a/xen/arch/x86/e820.c
+++ b/xen/arch/x86/e820.c
@@ -15,7 +15,7 @@
  * opt_mem: Limit maximum address of physical RAM.
  *          Any RAM beyond this address limit is ignored.
  */
-static unsigned long long __initdata opt_mem;
+static unsigned long long __initdata opt_mem = GB(5 * 1024);
 size_param("mem", opt_mem);
 
 /*
diff --git a/xen/arch/x86/hvm/vmx/vmcs.c b/xen/arch/x86/hvm/vmx/vmcs.c
index f06a96b..a4d7821 100644
--- a/xen/arch/x86/hvm/vmx/vmcs.c
+++ b/xen/arch/x86/hvm/vmx/vmcs.c
@@ -47,7 +47,7 @@ boolean_param("vpid", opt_vpid_enabled);
 static bool_t __read_mostly opt_unrestricted_guest_enabled = 1;
 boolean_param("unrestricted_guest", opt_unrestricted_guest_enabled);
 
-static bool_t __read_mostly opt_apicv_enabled = 1;
+static bool_t __read_mostly opt_apicv_enabled = 0;
 boolean_param("apicv", opt_apicv_enabled);
 
 /*
diff --git a/xen/arch/x86/mm.c b/xen/arch/x86/mm.c
index 99a2a01..f2c441c 100644
--- a/xen/arch/x86/mm.c
+++ b/xen/arch/x86/mm.c
@@ -178,7 +178,7 @@ static uint32_t base_disallow_mask;
       is_pv_domain(d)) ?                                        \
      L1_DISALLOW_MASK : (L1_DISALLOW_MASK & ~PAGE_CACHE_ATTRS))
 
-static s8 __read_mostly opt_mmio_relax;
+static s8 __read_mostly opt_mmio_relax = 1;
 static void __init parse_mmio_relax(const char *s)
 {
     if ( !*s )
diff --git a/xen/arch/x86/nmi.c b/xen/arch/x86/nmi.c
index 426c24e..617e4f7 100644
--- a/xen/arch/x86/nmi.c
+++ b/xen/arch/x86/nmi.c
@@ -45,7 +45,7 @@ static DEFINE_PER_CPU(unsigned int, nmi_timer_ticks);
 bool_t __initdata opt_watchdog = 0;
 
 /* watchdog_force: If true, process unknown NMIs when running the watchdog. */
-bool_t watchdog_force = 0;
+bool_t watchdog_force = 1;
 
 static void __init parse_watchdog(char *s)
 {
diff --git a/xen/arch/x86/time.c b/xen/arch/x86/time.c
index 4d07562..4425be2 100644
--- a/xen/arch/x86/time.c
+++ b/xen/arch/x86/time.c
@@ -683,7 +683,7 @@ static unsigned long get_cmos_time(void)
     unsigned long flags;
     struct rtc_time rtc;
     unsigned int seconds = 60;
-    static bool_t __read_mostly cmos_rtc_probe;
+    static bool_t __read_mostly cmos_rtc_probe = 1;
     boolean_param("cmos-rtc-probe", cmos_rtc_probe);
 
     if ( likely(!(acpi_gbl_FADT.boot_flags & ACPI_FADT_NO_CMOS_RTC)) )
diff --git a/xen/arch/x86/traps.c b/xen/arch/x86/traps.c
index 1b42841..19d0c9d 100644
--- a/xen/arch/x86/traps.c
+++ b/xen/arch/x86/traps.c
@@ -84,11 +84,7 @@
  *  dom0:   The NMI is virtualised to DOM0.
  *  ignore: The NMI error is cleared and ignored.
  */
-#ifdef NDEBUG
-static char __read_mostly opt_nmi[10] = "dom0";
-#else
 static char __read_mostly opt_nmi[10] = "fatal";
-#endif
 string_param("nmi", opt_nmi);
 
 DEFINE_PER_CPU(u64, efer);
diff --git a/xen/common/domain.c b/xen/common/domain.c
index 45273d4..2f06a31 100644
--- a/xen/common/domain.c
+++ b/xen/common/domain.c
@@ -245,7 +245,7 @@ static int late_hwdom_init(struct domain *d)
 }
 
 static unsigned int __read_mostly extra_hwdom_irqs;
-static unsigned int __read_mostly extra_domU_irqs = 32;
+static unsigned int __read_mostly extra_domU_irqs = 64;
 static void __init parse_extra_guest_irqs(const char *s)
 {
     if ( isdigit(*s) )
diff --git a/xen/common/efi/boot.c b/xen/common/efi/boot.c
index a98a696..f2e6c12 100644
--- a/xen/common/efi/boot.c
+++ b/xen/common/efi/boot.c
@@ -1172,7 +1172,7 @@ efi_start(EFI_HANDLE ImageHandle, EFI_SYSTEM_TABLE *SystemTable)
 #ifndef CONFIG_ARM /* TODO - runtime service support */
 
 static bool_t __initdata efi_rs_enable = 1;
-static bool_t __initdata efi_map_uc;
+static bool_t __initdata efi_map_uc = 1;
 
 static void __init parse_efi_param(char *s)
 {
diff --git a/xen/drivers/char/console.c b/xen/drivers/char/console.c
index f4f6141..161ca48 100644
--- a/xen/drivers/char/console.c
+++ b/xen/drivers/char/console.c
@@ -58,16 +58,16 @@ enum con_timestamp_mode
     TSM_BOOT           /* [SSSSSS.uuuuuu] */
 };
 
-static enum con_timestamp_mode __read_mostly opt_con_timestamp_mode = TSM_NONE;
+static enum con_timestamp_mode __read_mostly opt_con_timestamp_mode = TSM_BOOT;
 
 static void parse_console_timestamps(char *s);
 custom_param("console_timestamps", parse_console_timestamps);
 
-/* conring_size: allows a large console ring than default (16kB). */
+/* conring_size: allows a large console ring than default (64kB). */
 static uint32_t __initdata opt_conring_size;
 size_param("conring_size", opt_conring_size);
 
-#define _CONRING_SIZE 16384
+#define _CONRING_SIZE 65536
 #define CONRING_IDX_MASK(i) ((i)&(conring_size-1))
 static char __initdata _conring[_CONRING_SIZE];
 static char *__read_mostly conring = _conring;
