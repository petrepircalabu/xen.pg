HP Gen8 BIOS incorrectly add GPU audio devices to the RMRR device list.
This causes domains with GPU devices passthrough to fail to start as the 
RMRR regions conflict with key memory locations in the guest memory map.
diff --git a/xen/drivers/passthrough/vtd/dmar.c b/xen/drivers/passthrough/vtd/dmar.c
index 08c1d2d..98a2205 100644
--- a/xen/drivers/passthrough/vtd/dmar.c
+++ b/xen/drivers/passthrough/vtd/dmar.c
@@ -391,6 +391,15 @@ static int __init acpi_parse_dev_scope(
             break;
 
         case ACPI_DMAR_SCOPE_TYPE_ENDPOINT:
+            if ( !drhd && rmrr_device_quirks(seg, bus, path->dev, path->fn) )
+            {
+                if ( iommu_verbose )
+                    printk(VTDPREFIX " QUIRK: ignoring %04x:%02x:%02x.%u\n",
+                           seg, bus, path->dev, path->fn);
+                start += acpi_scope->length;
+                continue;
+            }
+
             if ( iommu_verbose )
                 printk(VTDPREFIX " endpoint: %04x:%02x:%02x.%u\n",
                        seg, bus, path->dev, path->fn);
diff --git a/xen/drivers/passthrough/vtd/dmar.h b/xen/drivers/passthrough/vtd/dmar.h
index 729b603..601f889 100644
--- a/xen/drivers/passthrough/vtd/dmar.h
+++ b/xen/drivers/passthrough/vtd/dmar.h
@@ -129,5 +129,6 @@ do {                                                \
 int vtd_hw_check(void);
 void disable_pmr(struct iommu *iommu);
 int is_igd_drhd(struct acpi_drhd_unit *drhd);
+int rmrr_device_quirks(u16 seg, u8 bus, u8 dev, u8 func);
 
 #endif /* _DMAR_H_ */
diff --git a/xen/drivers/passthrough/vtd/quirks.c b/xen/drivers/passthrough/vtd/quirks.c
index 49df41d..b76c8f6 100644
--- a/xen/drivers/passthrough/vtd/quirks.c
+++ b/xen/drivers/passthrough/vtd/quirks.c
@@ -29,6 +29,7 @@
 #include <xen/pci_ids.h>
 #include <xen/pci_regs.h>
 #include <xen/keyhandler.h>
+#include <xen/dmi.h>
 #include <asm/msi.h>
 #include <asm/irq.h>
 #include <asm/pci.h>
@@ -536,3 +537,53 @@ void pci_vtd_quirk(const struct pci_dev *pdev)
         break;
     }
 }
+
+static int __initdata rmrr_quirk_match;
+static int __initdata rmrr_dmi_checked;
+static int __init dmi_rmrr_quirk_match(/*const*/ struct dmi_system_id *id)
+{
+    rmrr_quirk_match = 1;
+    return 0;
+}
+
+static struct dmi_system_id __initdata rmrr_dmi_quirks[] =
+{
+    {
+        .callback = dmi_rmrr_quirk_match,
+        .ident    = "HP Gen 8",
+        .matches  = {
+            DMI_MATCH(DMI_SYS_VENDOR, "HP"),
+            DMI_MATCH(DMI_PRODUCT_NAME,   "Gen8")
+        }
+    },
+	{}
+};
+
+#define PCI_CLASS_AUDIO_DEVICE    0x0403
+
+int __init rmrr_hp_quirks(u16 seg, u8 bus, u8 dev, u8 func)
+{
+    u16 class_device;
+    /* Only match HP systems and RMRR units */
+    if ( !rmrr_quirk_match )
+        return 0;
+
+    class_device = pci_conf_read16(seg, bus, dev, func, PCI_CLASS_DEVICE);
+
+    /* Match PCI audio class device not on function 0 */
+    if ( func != 0 && class_device == PCI_CLASS_AUDIO_DEVICE )
+        return 1;
+
+    return 0;
+}
+
+int __init rmrr_device_quirks(u16 seg, u8 bus, u8 dev, u8 func)
+{
+    if ( !rmrr_dmi_checked )
+    {
+        dmi_check_system(rmrr_dmi_quirks);
+        rmrr_dmi_checked = 1;
+    }
+
+    return rmrr_hp_quirks(seg, bus, dev, func);
+}
