diff --git a/xen/arch/x86/hvm/emulate.c b/xen/arch/x86/hvm/emulate.c
index a2d5f4e..e7b7293 100644
--- a/xen/arch/x86/hvm/emulate.c
+++ b/xen/arch/x86/hvm/emulate.c
@@ -108,29 +108,6 @@ static int hvmemul_do_io(
         return X86EMUL_UNHANDLEABLE;
     }
 
-    if ( is_mmio && !data_is_addr )
-    {
-        /* Part of a multi-cycle read or write? */
-        if ( dir == IOREQ_WRITE )
-        {
-            paddr_t pa = vio->mmio_large_write_pa;
-            unsigned int bytes = vio->mmio_large_write_bytes;
-            if ( (addr >= pa) && ((addr + size) <= (pa + bytes)) )
-                return X86EMUL_OKAY;
-        }
-        else
-        {
-            paddr_t pa = vio->mmio_large_read_pa;
-            unsigned int bytes = vio->mmio_large_read_bytes;
-            if ( (addr >= pa) && ((addr + size) <= (pa + bytes)) )
-            {
-                memcpy(p_data, &vio->mmio_large_read[addr - pa],
-                       size);
-                return X86EMUL_OKAY;
-            }
-        }
-    }
-
     switch ( vio->io_req.state )
     {
     case STATE_IOREQ_NONE:
@@ -198,33 +175,6 @@ static int hvmemul_do_io(
             memcpy(p_data, &p.data, size);
     }
 
-    if ( is_mmio && !data_is_addr )
-    {
-        /* Part of a multi-cycle read or write? */
-        if ( dir == IOREQ_WRITE )
-        {
-            paddr_t pa = vio->mmio_large_write_pa;
-            unsigned int bytes = vio->mmio_large_write_bytes;
-            if ( bytes == 0 )
-                pa = vio->mmio_large_write_pa = addr;
-            if ( addr == (pa + bytes) )
-                vio->mmio_large_write_bytes += size;
-        }
-        else
-        {
-            paddr_t pa = vio->mmio_large_read_pa;
-            unsigned int bytes = vio->mmio_large_read_bytes;
-            if ( bytes == 0 )
-                pa = vio->mmio_large_read_pa = addr;
-            if ( (addr == (pa + bytes)) &&
-                 ((bytes + size) <= sizeof(vio->mmio_large_read)) )
-            {
-                memcpy(&vio->mmio_large_read[bytes], p_data, size);
-                vio->mmio_large_read_bytes += size;
-            }
-        }
-    }
-
     return X86EMUL_OKAY;
 }
 
@@ -418,7 +368,58 @@ static int hvmemul_do_mmio_buffer(paddr_t mmio_gpa,
                                   bool_t df,
                                   uint8_t *buffer)
 {
-    return hvmemul_do_io_buffer(1, mmio_gpa, reps, size, dir, df, buffer);
+    struct vcpu *curr = current;
+    struct hvm_vcpu_io *vio = &curr->arch.hvm_vcpu.hvm_io;
+    int rc;
+
+    if ( dir == IOREQ_WRITE )
+    {
+        paddr_t pa = vio->mmio_large_write_pa;
+        unsigned int bytes = vio->mmio_large_write_bytes;
+        if ( (mmio_gpa >= pa) && ((mmio_gpa + size) <= (pa + bytes)) )
+            return X86EMUL_OKAY;
+    }
+    else
+    {
+        paddr_t pa = vio->mmio_large_read_pa;
+        unsigned int bytes = vio->mmio_large_read_bytes;
+        if ( (mmio_gpa >= pa) && ((mmio_gpa + size) <= (pa + bytes)) )
+        {
+            memcpy(buffer, &vio->mmio_large_read[mmio_gpa - pa],
+                   size);
+            return X86EMUL_OKAY;
+        }
+    }
+
+    rc = hvmemul_do_io_buffer(1, mmio_gpa, reps, size, dir, df, buffer);
+
+    if ( rc != X86EMUL_OKAY )
+        return rc;
+
+    if ( dir == IOREQ_WRITE )
+    {
+        paddr_t pa = vio->mmio_large_write_pa;
+        unsigned int bytes = vio->mmio_large_write_bytes;
+        if ( bytes == 0 )
+            pa = vio->mmio_large_write_pa = mmio_gpa;
+        if ( mmio_gpa == (pa + bytes) )
+            vio->mmio_large_write_bytes += size;
+    }
+    else
+    {
+        paddr_t pa = vio->mmio_large_read_pa;
+        unsigned int bytes = vio->mmio_large_read_bytes;
+        if ( bytes == 0 )
+            pa = vio->mmio_large_read_pa = mmio_gpa;
+        if ( (mmio_gpa == (pa + bytes)) &&
+             ((bytes + size) <= sizeof(vio->mmio_large_read)) )
+        {
+            memcpy(&vio->mmio_large_read[bytes], buffer, size);
+            vio->mmio_large_read_bytes += size;
+        }
+    }
+
+    return X86EMUL_OKAY;
 }
 
 /*
